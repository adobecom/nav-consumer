{"version":3,"file":"static/js/7044.5fe723f8.chunk.js","mappings":"2KAEMA,G,QAAe,IASrB,SAASC,IAA6C,IAAjC,OAAEC,EAAA,KAAQC,EAAA,SAAMC,GAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAI,CAAC,EACjD,GAAwB,oBAAbD,EAAyB,OAEpC,MAAMI,EAAeR,EAAaS,MAAMC,GAASA,EAAKC,OAASR,EAAKQ,OAChEH,EACFJ,EAASI,EAAaI,KAAKC,GACvBV,EAAKQ,KAAA,GAAAG,OACFZ,EAAA,IAAAY,OAAaZ,GAAW,GAAE,MAGnCa,MAAMZ,EAAKQ,KAAM,CAAEK,OAAQ,SAAUC,MAAML,IAEzC,GADAZ,EAAakB,KAAK,CAAEP,KAAMR,EAAKQ,KAAMC,UAChCA,EAAKC,GAAI,MAAM,IAAIM,MAAM,kBAC9Bf,EAASD,EAAKQ,KAAK,IAClBS,OAAM,KACPhB,EAAA,GAAAU,OAAYZ,EAAA,IAAAY,OAAaZ,GAAW,GAAE,KAAI,GAE9C,CAEO,SAASmB,EAAalB,EAAMmB,GACjC,IAAIC,EACAC,EAAWrB,EAAKsB,aAAa,QACjC,GAAID,EAASE,WAAW,QACtB,IAAMF,EAAW,IAAIG,IAAIH,GAAUA,QAAU,CAAE,MAAOI,GAAwC,CAEhG,MACM1B,EADYsB,EAASK,MAAM,KACR,IAAM,GAC/B,IAAI,KAAElB,GAASR,EACXQ,EAAKmB,SAAS,OAAMnB,EAAOA,EAAKoB,MAAM,GAAI,IAE9C,MAAM,YAAEC,IAAgBC,EAAAA,EAAAA,aACxB,GAAID,KAAgBC,EAAAA,EAAAA,aAAYC,QAAQhC,GAAS,CAC/C,MAAMiC,EAAaH,EAAY9B,GAC/BS,EAAOA,EAAKyB,QAAA,IAAAtB,OAAYZ,GAAUiC,EAAA,IAAArB,OAAiBqB,GAAe,GACpE,CACAhC,EAAKQ,KAAA,GAAAG,OAAUH,GAAIG,OAAGQ,GAEtBnB,EAAKkC,iBAAiB,aAAa,KACjCC,YAAW,KACLnC,EAAKoC,QAAQ,YAAchB,GAC7BtB,EAAY,CACVC,SACAC,OACAC,SAAWoC,IACTrC,EAAKQ,KAAO6B,EACZjB,GAAc,CAAI,GAGxB,GACC,IAAI,IAGTpB,EAAKkC,iBAAiB,SAAUT,KA3DlC,SAA0B1B,GACxB,MAAMuC,EAASC,OAAOC,SAASC,KAAKd,SAAS,cAAgB,mBAAqB,GAElFe,SAASC,OAAA,iBAAAhC,OAA0BZ,EAAM,aAAAY,OAD1B,QAC4C,YAAAA,OAAW2B,GACtEM,eAAeC,QAAQ,gBAAiB9C,EAC1C,CAuDI+C,CAA4B,KAAX/C,EAAgB,KAAOA,GACpCqB,IACJK,EAAEsB,iBACFjD,EAAY,CACVC,SACAC,OACAC,SAAWoC,IACTE,OAAOS,KAAKX,EAASZ,EAAEwB,SAAWxB,EAAEyB,QAAU,SAAW,QAAQ,IAEnE,GAEN,CAEe,SAARC,EAAsBC,GAC3B,MAAMC,GAASvB,EAAAA,EAAAA,aACTwB,EAAOF,EAAMG,iBAAiB,gBACpC,GAAID,EAAKnD,OAAS,EAAG,OACrB,MAAMqD,EAAQF,EAAK,GAAGC,iBAAiB,KACvC,IAAKC,EAAMrD,OAAQ,OACnB,MAAM,OAAEJ,GAAWsD,EAAOI,OACpBtC,EAAOoB,OAAOC,SAAShC,KAAKyB,QAAA,GAAAtB,OAAW4B,OAAOC,SAASkB,QAAM/C,OAAGZ,GAAU,IAAIkC,QAAQ,WAAY,IACxGuB,EAAMG,SAAS3D,GAASkB,EAAalB,EAAMmB,IAC7C,C","sources":["../node_modules/@adobecom/blocks/region-nav/region-nav.js"],"sourcesContent":["import { getConfig } from '../../utils/utils.js';\n\nconst queriedPages = [];\n\nfunction setInternational(prefix) {\n  const domain = window.location.host.endsWith('.adobe.com') ? 'domain=adobe.com' : '';\n  const maxAge = 365 * 24 * 60 * 60; // max-age in seconds for 365 days\n  document.cookie = `international=${prefix};max-age=${maxAge};path=/;${domain}`;\n  sessionStorage.setItem('international', prefix);\n}\n\nfunction handleEvent({ prefix, link, callback } = {}) {\n  if (typeof callback !== 'function') return;\n\n  const existingPage = queriedPages.find((page) => page.href === link.href);\n  if (existingPage) {\n    callback(existingPage.resp.ok\n      ? link.href\n      : `${prefix ? `/${prefix}` : ''}/`);\n    return;\n  }\n  fetch(link.href, { method: 'HEAD' }).then((resp) => {\n    queriedPages.push({ href: link.href, resp });\n    if (!resp.ok) throw new Error('request failed');\n    callback(link.href);\n  }).catch(() => {\n    callback(`${prefix ? `/${prefix}` : ''}/`);\n  });\n}\n\nexport function decorateLink(link, path) {\n  let hrefAdapted;\n  let pathname = link.getAttribute('href');\n  if (pathname.startsWith('http')) {\n    try { pathname = new URL(pathname).pathname; } catch (e) { /* href does not contain domain */ }\n  }\n  const linkParts = pathname.split('/');\n  const prefix = linkParts[1] || '';\n  let { href } = link;\n  if (href.endsWith('/')) href = href.slice(0, -1);\n\n  const { languageMap } = getConfig();\n  if (languageMap && !getConfig().locales[prefix]) {\n    const valueInMap = languageMap[prefix];\n    href = href.replace(`/${prefix}`, valueInMap ? `/${valueInMap}` : '');\n  }\n  link.href = `${href}${path}`;\n\n  link.addEventListener('mouseover', () => {\n    setTimeout(() => {\n      if (link.matches(':hover') && !hrefAdapted) {\n        handleEvent({\n          prefix,\n          link,\n          callback: (newHref) => {\n            link.href = newHref;\n            hrefAdapted = true;\n          },\n        });\n      }\n    }, 100);\n  });\n\n  link.addEventListener('click', (e) => {\n    setInternational(prefix === '' ? 'us' : prefix);\n    if (hrefAdapted) return;\n    e.preventDefault();\n    handleEvent({\n      prefix,\n      link,\n      callback: (newHref) => {\n        window.open(newHref, e.ctrlKey || e.metaKey ? '_blank' : '_self');\n      },\n    });\n  });\n}\n\nexport default function init(block) {\n  const config = getConfig();\n  const divs = block.querySelectorAll(':scope > div');\n  if (divs.length < 2) return;\n  const links = divs[1].querySelectorAll('a');\n  if (!links.length) return;\n  const { prefix } = config.locale;\n  const path = window.location.href.replace(`${window.location.origin}${prefix}`, '').replace('#langnav', '');\n  links.forEach((link) => decorateLink(link, path));\n}\n"],"names":["queriedPages","handleEvent","prefix","link","callback","arguments","length","undefined","existingPage","find","page","href","resp","ok","concat","fetch","method","then","push","Error","catch","decorateLink","path","hrefAdapted","pathname","getAttribute","startsWith","URL","e","split","endsWith","slice","languageMap","getConfig","locales","valueInMap","replace","addEventListener","setTimeout","matches","newHref","domain","window","location","host","document","cookie","sessionStorage","setItem","setInternational","preventDefault","open","ctrlKey","metaKey","init","block","config","divs","querySelectorAll","links","locale","origin","forEach"],"sourceRoot":""}