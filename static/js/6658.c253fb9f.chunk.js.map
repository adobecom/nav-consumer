{"version":3,"file":"static/js/6658.c253fb9f.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@adobecom/features/icons/icons.js"],"sourcesContent":["function _taggedTemplateLiteral(e, t) {\n  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {\n    raw: {\n      value: Object.freeze(t)\n    }\n  }));\n}\nexport { _taggedTemplateLiteral as default };","import { lanaLog } from '../../blocks/global-navigation/utilities/utilities.js';\nimport { getFederatedContentRoot } from '../../utils/federated.js';\nimport { getConfig } from '../../utils/utils.js';\n\n// These are blocks that misuse icons for other purposes\nconst rogueBlocks = ['unity', 'cc-forms', 'interactive-metadata'];\nconst iconCache = new Map();\nlet miloIconsPromise;\n\nlet tooltipListenersPromise = false;\n\nfunction decorateToolTip(icon, iconName) {\n  const hasTooltip = icon.closest('em')?.textContent.includes('|') && [...icon.classList].some((cls) => cls.includes('tooltip'));\n  if (!hasTooltip) return;\n\n  const wrapper = icon.closest('em');\n  wrapper.className = 'tooltip-wrapper';\n  const conf = wrapper.textContent.split('|');\n  const content = conf.pop()?.trim();\n  if (!content) return;\n\n  icon.dataset.tooltip = content;\n  const place = conf.pop()?.trim().toLowerCase() || 'right';\n  icon.className = `icon icon-${iconName} milo-tooltip ${place}`;\n\n  [['tabindex', '0'], ['aria-label', content], ['role', 'button']].forEach(([attr, value]) => {\n    icon.setAttribute(attr, value);\n  });\n\n  wrapper.parentElement.replaceChild(icon, wrapper);\n\n  if (!tooltipListenersPromise) {\n    tooltipListenersPromise = import('../../scripts/tooltip.js').then(({ default: addTooltipListeners }) => {\n      addTooltipListeners();\n    });\n  }\n}\n\nasync function getSVGsfromFile(path) {\n  if (!path) return null;\n  const resp = await fetch(path);\n  if (!resp.ok) return null;\n\n  const miloIcons = {};\n  const text = await resp.text();\n  const parser = new DOMParser();\n  const parsedText = parser.parseFromString(text, 'image/svg+xml');\n  const symbols = parsedText.querySelectorAll('symbol');\n\n  symbols.forEach((symbol) => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    while (symbol.firstChild) svg.appendChild(symbol.firstChild);\n    [...symbol.attributes].forEach((attr) => svg.attributes.setNamedItem(attr.cloneNode()));\n    svg.classList.add('icon-milo', `icon-milo-${svg.id}`);\n    miloIcons[svg.id] = svg;\n  });\n\n  return miloIcons;\n}\n\nasync function fetchAndParseSVG(url, iconName) {\n  const response = await fetch(url);\n  if (!response.ok) throw new Error(`Failed to fetch SVG for ${iconName}: ${response.statusText}`);\n\n  const text = await response.text();\n  const parser = new DOMParser();\n  const svgElement = parser.parseFromString(text, 'image/svg+xml').querySelector('svg');\n\n  if (!svgElement) throw new Error(`No SVG element found in fetched content for ${iconName}`);\n\n  svgElement.classList.add('icon-milo', `icon-milo-${iconName}`);\n  return svgElement;\n}\n\nasync function fetchFederalIcon(iconName) {\n  const fedRoot = getFederatedContentRoot();\n  const url = `${fedRoot}/federal/assets/icons/svgs/${iconName}.svg`;\n\n  try {\n    const svgElement = await fetchAndParseSVG(url, iconName);\n    iconCache.set(iconName, svgElement);\n    return svgElement;\n  } catch (error) {\n    lanaLog({\n      message: `Error fetching federal SVG for ${iconName}, falling back to Milo icon`,\n      error,\n      tags: 'icons',\n      errorType: 'error',\n    });\n    return null;\n  }\n}\n\nasync function fetchMiloIcon(iconName) {\n  if (!miloIconsPromise) {\n    const { miloLibs, codeRoot } = getConfig();\n    const base = miloLibs || codeRoot;\n    miloIconsPromise = getSVGsfromFile(`${base}/img/icons/icons.svg`);\n  }\n\n  const miloIcons = await miloIconsPromise;\n  if (miloIcons?.[iconName]) {\n    const icon = miloIcons[iconName].cloneNode(true);\n    iconCache.set(iconName, icon);\n    return icon;\n  }\n\n  lanaLog({\n    message: `No fallback Milo icon found for ${iconName}`,\n    tags: 'icons',\n    errorType: 'error',\n  });\n  return null;\n}\n\nasync function getIcon(iconName, isRogueIcon) {\n  if (iconCache.has(iconName)) return iconCache.get(iconName);\n\n  if (!isRogueIcon) {\n    const federalIcon = await fetchFederalIcon(iconName);\n    if (federalIcon) return federalIcon;\n  }\n\n  return fetchMiloIcon(iconName);\n}\n\nexport default async function loadIcons(icons) {\n  const iconPromises = [...icons].map(async (icon) => {\n    const iconNameInitial = icon.classList[1].replace('icon-', '');\n    let iconName = iconNameInitial === 'tooltip' ? 'info' : iconNameInitial;\n    if (iconNameInitial.includes('tooltip-')) iconName = iconNameInitial.replace(/tooltip-/, '');\n    decorateToolTip(icon, iconName);\n    if (icon.dataset.svgInjected || !iconName) return;\n\n    const isRogueIcon = rogueBlocks.some((b) => icon.closest(`div.${b}`));\n    const svgElement = await getIcon(iconName, isRogueIcon);\n    if (svgElement && !icon.dataset.svgInjected) {\n      const svgClone = svgElement.cloneNode(true);\n      icon.appendChild(svgClone);\n      icon.dataset.svgInjected = 'true';\n\n      const parent = icon.parentElement;\n      if (parent?.childNodes.length > 1) {\n        if (parent.lastChild === icon) {\n          icon.classList.add('margin-inline-start');\n        } else if (parent.firstChild === icon) {\n          icon.classList.add('margin-inline-end');\n          if (parent.parentElement.tagName === 'LI') parent.parentElement.classList.add('icon-list-item');\n        } else {\n          icon.classList.add('margin-inline-start', 'margin-inline-end');\n        }\n      }\n    }\n  });\n\n  await Promise.allSettled(iconPromises);\n}\n\nexport const fetchIcons = (config) => {\n  const { miloLibs, codeRoot } = config;\n  const base = miloLibs || codeRoot;\n  return getSVGsfromFile(`${base}/img/icons/icons.svg`);\n};\n\nexport function fetchIconList(url) {\n  return fetch(url)\n    .then((resp) => resp.json())\n    .then((json) => json.content.data)\n    .catch(() => {\n      lanaLog({ message: 'Failed to fetch iconList', tags: 'icons', errorType: 'error' });\n      return [];\n    });\n}\n"],"names":["_taggedTemplateLiteral","e","t","slice","Object","freeze","defineProperties","raw","value","p","w","d","Map","g","async","u","o","fetch","ok","s","text","DOMParser","parseFromString","querySelectorAll","forEach","r","n","document","createElementNS","firstChild","appendChild","attributes","h","setNamedItem","cloneNode","classList","add","concat","id","x","f","Error","statusText","a","querySelector","I","set","c","message","error","tags","errorType","L","has","get","miloLibs","codeRoot","m","C","b","map","replace","i","includes","_t$closest","_i$pop","_i$pop2","closest","textContent","some","className","split","pop","trim","dataset","tooltip","l","toLowerCase","_ref","setAttribute","parentElement","replaceChild","then","_ref2","default","v","svgInjected","childNodes","length","lastChild","tagName","Promise","allSettled","R","M","json","content","data","catch"],"sourceRoot":""}