{"version":3,"file":"static/js/1041.a3761263.chunk.js","mappings":"4LAAMA,EAAc,yCACdC,EAAqB,CACzB,oDACA,oDAGF,SAASC,IAAsB,IAAAC,EAE7B,OADe,QAATA,EAASC,cAAA,IAAAD,GAAQ,QAARA,EAAAA,EAAQE,gBAAA,IAAAF,OAAA,EAARA,EAAkBG,UACnBC,QAAQ,SAAU,GAClC,CAgBA,SAASC,IAEP,MAAMC,EAAe,IAAIC,WAAW,IACpCC,OAAOC,gBAAgBH,GAGvBA,EAAa,GAAMA,EAAa,GAAK,GAAM,GAE3CA,EAAa,GAAMA,EAAa,GAAK,GAAM,IAG3C,IAAII,EAAO,GAWX,OARAJ,EAAaK,SAAQ,CAACC,EAAMC,KAC1B,MAAMC,EAAMF,EAAKG,SAAS,IAAIC,SAAS,EAAG,KAC5B,IAAVH,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,KAAVA,IAC/CH,GAAQ,KAEVA,GAAQI,CAAA,IAGHJ,CACT,CAyDA,SAASO,EAAUC,GACjB,MAAMC,EAASC,SAASD,OAAOE,MAAM,KAClCC,KAAKC,GAAMC,mBAAmBD,EAAEE,QAAQJ,MAAM,YAC9CK,MAAKC,IAAA,IAAEC,GAACD,EAAA,OAAMC,IAAMV,CAAG,IAE1B,OAAOC,EAASA,EAAO,GAAK,IAC9B,CAUA,SAASU,EAAUX,EAAKY,GAEtB,MAAMC,GAFuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAU,CAAC,GAEhBD,SAAW,IAC7BI,EAAO,IAAIC,KACjBD,EAAKE,QAAQF,EAAKG,UAAsB,GAAVP,EAAe,GAAK,GAAK,KACvD,MAAMQ,EAAA,WAAAC,OAA2BL,EAAKM,eAEtCrB,SAASD,OAAA,GAAAqB,OAAYtB,EAAG,KAAAsB,OAAIV,EAAK,MAAAU,OAAKD,EAAa,uBAAAC,OAAsBzC,IAAqB,IAChG,CAaA,SAAS2C,IAAsB,IAAAC,EAC7B,MAAMC,EAAkB3B,EAAUpB,GAGlC,IAAK+C,IAA2D,IAAvCA,EAAgBC,QAAQ,UAAmB,CAElE,MAAO,CACLC,KAAM,CAAC,CACLC,GAHc1C,IAId2C,mBAAoB,YACpBC,SAAS,IAGf,CAEA,MAAO,CACLC,KAAM,CAAC,CACLH,GAA0C,QAA1CJ,EAAIC,EAAgBO,MAAM,yBAAgB,IAAAR,OAAA,EAAtCA,EAA0C,GAC9CK,mBAAoB,YACpBC,SAAS,IAGf,CAyEA,SAASG,EAAAC,GAAgE,IAA3C,eAAEC,EAAA,SAAgBC,EAAA,OAAUC,EAAA,IAAQC,GAAIJ,EACpE,MAAMK,EAAezC,EAAU,OAEzB0C,EAA2B,SAARF,EAAiB,CAAC,uBAAyB,CAAC,qBAC/DG,EAzLR,SAA4CH,GAC1C,MAAM,SAAEI,GAAa5D,OAAOC,SAE5B,MAAY,SAARuD,EAAuB,wCAMlB,IAFPI,EAASC,OACP,glBAGK,wCAKA,IAFPD,EAASC,OACP,iMAGK,wCAGyB,IAA9BD,EAAShB,QAAQ,QACZ,uCAGF,sCACT,CA+J0BkB,CAAmCN,GAE3D,MAAO,CACLO,MAAO,CACLC,IAAK,IACAX,EACHY,YAAaxB,IACbyB,IAAK,CACHC,eAAgB,CACdC,IAAKpE,OAAOC,SAASoE,KACrBC,YAAa,gBACbC,OAAQ,gBACRC,aAAa,EACbC,YAAY,EACZC,KAAMpB,EACNqB,UAAW,CAAE9C,MAAO,IAEtB+C,eAAgB,CACdF,KAAM,cACNG,KAAM,QACNC,WAAY,CAAEjD,MAAO,IAEvBkD,YAAa,CAAEX,IAAKjD,SAAS6D,WAE/BC,WAAA,IAAe9C,MAAO+C,cACtBC,UAAW,gCAEbC,KAAM,CACJC,QAAS,CACPC,OAAQ,CACNC,OAAO,EAAOC,UAAW,YAAaC,QAAS,mBAAoBC,QAAQ,EAAMC,YAAapC,EAAOqC,KAAMC,SAAS,IAGxHC,eAAgB,CACdC,cAAe,CAAEC,MAAO,CAAEC,MAAO,CAAEC,SAAU,iBAC7CC,YAAa,CACXC,KAAM,CAAEC,SAAU,CAAEC,SAAU/C,EAAOqC,OACrCW,WAAY,CAAEC,SAAU,CAAEC,eAAgB,SAC1CC,aAAc,CAAEL,SAAU,CAAE/C,SAAUG,IACtCkD,YAAa,CAAEC,eAAgB,CAAEC,YAAa,CAAErB,UAAW,YAAasB,gBAAiB,gBAKjGC,MAAO,CACLC,SAAU,CAAEC,MAAO,CAAC,SACpBC,gBAAiB,CACfC,QAAS,CACP,4DACA,yDACA,yDACA,qDACA,mDAEFC,eAAgB,CAAC,cAGrBC,KAAM,CACJ/B,OAAQ,CAAEgC,WAAW,GACrBC,gBAAiB,CACfC,oBAAqB,CAAEC,aAAc/D,GACrCgE,iBAAkB,CAAEC,cAAehE,IAErCiE,MAAO,CACLC,OAAQ/H,IACRgI,gBAAgB,EAChBC,QArFwB5G,SAASD,OAAOE,MAAM,KACnDC,KAAKC,GAAMA,EAAEE,OAAOJ,MAAM,OAC1B4G,QAAOC,IAAA,IAAEhH,GAAGgH,EAAA,OAAMpI,EAAmBqI,SAASjH,EAAI,IAClDI,KAAI8G,IAAA,IAAElH,EAAKY,GAAKsG,EAAA,MAAO,CAAElH,MAAKY,QAAO,MAsFxC,CAoEO,IAAMuG,EAAkCC,UAA8C,IAAvC,OAAE9E,EAAA,IAAQC,EAAA,kBAAK8E,GAAkBC,EAGrF,GAAc,gBAFAvH,EAAU,oDAGtB,MAAO,CAAC,EAIV,MAAMwH,EAAyB,SAARhF,EAAiB,uCAAyC,uCAC3EiF,EA5CR,WACE,MAAMC,EAAW,IAAItE,IAAIpE,OAAOC,SAASoE,OACnC,KAAEsE,GAAS3I,OAAOC,SAKxB,GAJcyI,EAASE,aAAaC,IAAI,QAI3BF,EAAKT,SAAS,cAAgBS,EAAKT,SAAS,UACpDS,EAAKT,SAAS,SACjB,MALU,0CASZ,GAAIS,EAAKT,SAAS,gBACbS,EAAKT,SAAS,eACdS,EAAKT,SAAS,iBACjB,MAAO,yDAGT,MAAM,OAAEY,GAAW9I,OAAOC,SAC1B,MAAO,GAAPsC,OAAUuG,EAAM,8BAClB,CAuByBC,IAGjB,YACJC,EAAA,aAAaC,EAAA,kBACbC,EAAA,cAAmBC,EAAA,eAAeC,GA/S7B,CACLJ,YAAahJ,OAAOqJ,OAAOC,MAC3BL,aAAcjJ,OAAOqJ,OAAOE,OAC5BL,kBAAmBlJ,OAAOwJ,WAAaxJ,OAAOyJ,YAAc,YAAc,WAC1EN,cAAenJ,OAAOwJ,WACtBJ,eAAgBpJ,OAAOyJ,aA8SnBC,EAAe,IAAIvH,KACnBwH,EAAaD,EAAaxE,cAC1B0E,EAAwBF,EAAaG,oBAErCvG,EAnOR,SAASwG,GAAoC,IAAZ,OAAEvG,GAAOuG,EACxC,MAAM,KAAEnB,EAAA,SAAM/E,GAAa,IAAIQ,IAAIpE,OAAOC,SAASoE,OAC5C0F,GAAgBnG,EAASxC,MAAM,KAAK4G,QAAQ1G,GAAMA,IAAMiC,EAAOyG,SAAQC,KAAK,KAAK7I,MAAM,KAC9F,MAAO,GAAPmB,OAAUoG,EAAKxI,QAAQ,OAAQ,IAAG,KAAAoC,OAAIwH,EACxC,CA+NmBG,CAAwB,CAAE3G,WAErCF,EAnNR,SAAS8G,GAGN,IAHwB,YACzBnB,EAAA,aAAaC,EAAA,kBAAcC,EAAA,cAC3BC,EAAA,eAAeC,EAAA,UAAgBgB,EAAA,eAAWC,GAC5CF,EACE,MAAO,CACLG,OAAQ,CACNrB,eACAD,cACAE,qBAEFqB,YAAa,CACX1F,KAAM,UACN2F,eAAgB,CACdrB,gBACAC,mBAGJqB,aAAc,CACZL,YACAM,oBAAqBL,GAG3B,CA6LyBM,CAAkB,CACvC3B,cACAC,eACAC,oBACAC,gBACAC,iBACAO,aACAC,0BAIIgB,EAAczH,EAAqB,CACvCE,iBACAC,WACAC,SACAC,QAGF,IAAI,IAAAqH,EAAAC,EAAAC,EACF,MAAMC,QAAmBC,QAAQC,KAAK,CACpCjE,MAAA,GAAA1E,OAASkG,EAAc,kBAAAlG,OAAiBiG,EAAc,eAAAjG,OAAcnC,KAAoB,CACtF+K,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,KAEvB,IAAIK,SAAQ,CAACM,EAAGC,KAAaC,YAAW,IAAMD,EAAO,IAAIE,MAAM,uBAAuBpD,EAAkB,MAG1G,IAAK0C,EAAWW,GACd,MAAM,IAAID,MAAM,iCAElB,MAAME,QAAuBZ,EAAWa,QAnG5C,SAA0B5I,GACxB,MAAM6I,EAAc9K,EAAUpB,GAEzBkM,GAEyC,IAAnCA,EAAYlJ,QAAQ,WAC7BhB,EAAUmK,mBAAmBnM,GAAc,GAAH2C,OAAMuJ,EAAW,WAAAvJ,OAAUU,IAFnErB,EAAUmK,mBAAmBnM,GAAc,SAAH2C,OAAYU,GAIxD,CA+FI+I,EAD2C,QAF9BnB,EAAAe,EAAeK,OACzBC,SAASC,GAASA,EAAKC,UACvB3K,MAAM4K,IAAA,IAAAC,EAAA,MAA4B,UAApB,QAAFA,EAAAD,EAAEE,iBAAA,IAAAD,OAAA,EAAFA,EAAaE,KAAe,eAAA3B,OAAA,EAF9BA,EAEiC/H,KAAM,MAGpD,MAAM2J,EAAgB,GACtB,OAAAb,QAAA,IAAAA,GAAgB,QAAhBd,EAAAc,EAAgBK,cAAA,IAAAnB,GAAhBA,EAAwBpK,SAASyL,IACG,IAAAO,EAAf,iBAAf,OAAAP,QAAA,IAAAA,OAAA,EAAAA,EAAMtH,QACR,OAAAsH,QAAA,IAAAA,GAAM,QAANO,EAAAP,EAAMC,eAAA,IAAAM,GAANA,EAAehM,SAAS0L,KAClB,OAAAA,QAAA,IAAAA,OAAA,EAAAA,EAASnL,OAAQpB,EAAmB,KAAM,OAAAuM,QAAA,IAAAA,OAAA,EAAAA,EAASnL,OAAQpB,EAAmB,IAChF4M,EAAcE,KAAK,IAAKP,GAC1B,IAEJ,IA9HJ,QAD4BQ,EAkILH,SAjIvB,IAAAG,GAAAA,EAAYlM,SAAQmM,IAAoB,IAAnB,IAAE5L,EAAA,MAAKY,GAAMgL,EACV7L,EAAUC,IAE9BW,EAAUmK,mBAAmB9K,GAAMY,EACrC,IAgIA,MAAMiL,EAAgB,OAAAlB,QAAA,IAAAA,GAAgB,QAAhBb,EAAAa,EAAgBK,cAAA,IAAAlB,GAA0D,QAA1DA,EAAhBA,EAAwBtJ,MAAMsL,GAAiB,8BAAXA,EAAElI,cAAoC,IAAAkG,OAAA,EAA1EA,EAA6EqB,QACnG,GAA6B,IAAzBU,EAAc9K,OAAc,MAAM,IAAI0J,MAAM,yBAChD,MAAO,CACL7G,KAAM,mBACNmI,OAAQ,CAAEC,aAAcH,GAE5B,CAAE,MAAOI,GACP,MAAO,CAAC,CACV,CA7IF,IAA8BN,CA6I5B,EAGKO,EAAQ,CAAE/E,kC","sources":["../node_modules/@adobecom/martech/helpers.js"],"sourcesContent":["const AMCV_COOKIE = 'AMCV_9E1005A551ED61CA0A490D45@AdobeOrg';\nconst KNDCTR_COOKIE_KEYS = [\n  'kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_identity',\n  'kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_cluster',\n];\n\nfunction getDomainWithoutWWW() {\n  const domain = window?.location?.hostname;\n  return domain.replace(/^www\\./, '');\n}\n\n/**\n * Generates a random UUIDv4 using cryptographically secure random values.\n * This implementation follows the RFC 4122 specification for UUIDv4.\n * It uses the `crypto` API for secure randomness without any bitwise operators.\n *\n * @returns {string} A random UUIDv4 string, e.g., 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n * where:\n *  - 'x' is any hexadecimal digit (0-9, a-f)\n *  - 'y' is one of 8, 9, A, or B, ensuring that the UUID conforms to version 4.\n *\n * @example\n * const myUuid = generateUUIDv4();\n * console.log(myUuid);  // Outputs: 'e8b57e2f-8cb1-4d0f-804b-e1a45bce2d90'\n */\nfunction generateUUIDv4() {\n  // Generate an array of 16 random values using the crypto API for better randomness\n  const randomValues = new Uint8Array(16);\n  crypto.getRandomValues(randomValues);\n\n  // Set the version (4) at the 13th position\n  randomValues[6] = (randomValues[6] % 16) + 64; // '4' for version 4\n  // Set the variant (8, 9, A, or B) at the 17th position\n  randomValues[8] = (randomValues[8] % 16) + 128; // One of 8, 9, A, or B\n\n  // Accumulate the UUID string in a separate variable (to avoid modifying the parameter directly)\n  let uuid = '';\n\n  // Convert the random values to a UUID string (xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx)\n  randomValues.forEach((byte, index) => {\n    const hex = byte.toString(16).padStart(2, '0'); // Convert byte to hex\n    if (index === 4 || index === 6 || index === 8 || index === 10) {\n      uuid += '-'; // Add dashes at appropriate positions\n    }\n    uuid += hex;\n  });\n\n  return uuid;\n}\n\n/**\n * Determines the Adobe Target property value based on the page's region.\n *\n * @param {string} env - The environment (e.g., 'prod' for production, 'dev' for development).\n * @returns {string} Adobe Target property value.\n */\nfunction getTargetPropertyBasedOnPageRegion(env) {\n  const { pathname } = window.location;\n\n  if (env !== 'prod') return 'bc8dfa27-29cc-625c-22ea-f7ccebfc6231'; // Default for non-prod environments\n\n  // EMEA & LATAM\n  if (\n    pathname.search(\n      /(\\/africa\\/|\\/be_en\\/|\\/be_fr\\/|\\/be_nl\\/|\\/cis_en\\/|\\/cy_en\\/|\\/dk\\/|\\/de\\/|\\/ee\\/|\\/es\\/|\\/fr\\/|\\/gr_en\\/|\\/ie\\/|\\/il_en\\/|\\/it\\/|\\/lv\\/|\\/lu_de\\/|\\/lu_en\\/|\\/lu_fr\\/|\\/hu\\/|\\/mt\\/|\\/mena_en\\/|\\/nl\\/|\\/no\\/|\\/pl\\/|\\/pt\\/|\\/ro\\/|\\/ch_de\\/|\\/si\\/|\\/sk\\/|\\/ch_fr\\/|\\/fi\\/|\\/se\\/|\\/ch_it\\/|\\/tr\\/|\\/uk\\/|\\/at\\/|\\/cz\\/|\\/bg\\/|\\/ru\\/|\\/cis_ru\\/|\\/ua\\/|\\/il_he\\/|\\/mena_ar\\/|\\/lt\\/|\\/sa_en\\/|\\/ae_en\\/|\\/ae_ar\\/|\\/sa_ar\\/|\\/ng\\/|\\/za\\/|\\/qa_ar\\/|\\/eg_en\\/|\\/eg_ar\\/|\\/kw_ar\\/|\\/eg_ar\\/|\\/qa_en\\/|\\/kw_en\\/|\\/gr_el\\/|\\/br\\/|\\/cl\\/|\\/la\\/|\\/mx\\/|\\/co\\/|\\/ar\\/|\\/pe\\/|\\/gt\\/|\\/pr\\/|\\/ec\\/|\\/cr\\/)/,\n    ) !== -1\n  ) {\n    return '488edf5f-3cbe-f410-0953-8c0c5c323772';\n  }\n  if ( // APAC\n    pathname.search(\n      /(\\/au\\/|\\/hk_en\\/|\\/in\\/|\\/nz\\/|\\/sea\\/|\\/cn\\/|\\/hk_zh\\/|\\/tw\\/|\\/kr\\/|\\/sg\\/|\\/th_en\\/|\\/th_th\\/|\\/my_en\\/|\\/my_ms\\/|\\/ph_en\\/|\\/ph_fil\\/|\\/vn_en\\/|\\/vn_vi\\/|\\/in_hi\\/|\\/id_id\\/|\\/id_en\\/)/,\n    ) !== -1\n  ) {\n    return '3de509ee-bbc7-58a3-0851-600d1c2e2918';\n  }\n  // JP\n  if (pathname.indexOf('/jp/') !== -1) {\n    return 'ba5bc9e8-8fb4-037a-12c8-682384720007';\n  }\n\n  return '4db35ee5-63ad-59f6-cec6-82ef8863b22d'; // Default\n}\n\n/**\n * Retrieves device-related information such as screen and viewport dimensions.\n *\n * @returns {Object} Object containing device and viewport information.\n */\nfunction getDeviceInfo() {\n  return {\n    screenWidth: window.screen.width,\n    screenHeight: window.screen.height,\n    screenOrientation: window.innerWidth > window.innerHeight ? 'landscape' : 'portrait',\n    viewportWidth: window.innerWidth,\n    viewportHeight: window.innerHeight,\n  };\n}\n\n/**\n * Retrieves the value of a specific cookie by its key.\n *\n * @param {string} key - The cookie key.\n * @returns {string|null} The cookie value, or null if the cookie doesn't exist.\n */\nfunction getCookie(key) {\n  const cookie = document.cookie.split(';')\n    .map((x) => decodeURIComponent(x.trim()).split(/=(.*)/s))\n    .find(([k]) => k === key);\n\n  return cookie ? cookie[1] : null;\n}\n\n/**\n * Sets a cookie with a specified expiration time (default 730 days).\n *\n * @param {string} key - The cookie key.\n * @param {string} value - The cookie value.\n * @param {Object} [options={}] - Optional settings for cookie properties.\n * Defaults to an expiration of 730 days.\n */\nfunction setCookie(key, value, options = {}) {\n  // Default expiration (24 months)\n  const expires = options.expires || 730;\n  const date = new Date();\n  date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);\n  const expiresString = `expires=${date.toUTCString()}`;\n\n  document.cookie = `${key}=${value}; ${expiresString}; path=/ ; domain=.${getDomainWithoutWWW()};`;\n}\n\n/**\n * Retrieves the ECID (Experience Cloud ID) from the browser's cookies or\n * generates a new FPID (First Party ID) if the ECID is not found. Returns\n * the ID in a structured object, depending on which ID is available.\n *\n * @returns {Object} An object containing either the ECID or FPID.\n *   - If ECID is found, the object will be:\n *     { ECID: [{ id: string, authenticatedState: string, primary: boolean }] }\n *   - If ECID is not found, the object will be:\n *     { FPID: [{ id: string, authenticatedState: string, primary: boolean }] }\n */\nfunction getOrGenerateUserId() {\n  const amcvCookieValue = getCookie(AMCV_COOKIE);\n\n  // If ECID is not found, generate and return FPID\n  if (!amcvCookieValue || (amcvCookieValue.indexOf('MCMID|') === -1)) {\n    const fpidValue = generateUUIDv4();\n    return {\n      FPID: [{\n        id: fpidValue,\n        authenticatedState: 'ambiguous',\n        primary: true,\n      }],\n    };\n  }\n\n  return {\n    ECID: [{\n      id: amcvCookieValue.match(/MCMID\\|([^|]+)/)?.[1],\n      authenticatedState: 'ambiguous',\n      primary: true,\n    }],\n  };\n}\n\n/**\n * Retrieves the page name for analytics, modified for the current locale.\n *\n * @param {Object} params - The parameters.\n * @param {Object} params.locale - The locale object containing\n * language/region info (e.g., { ietf: 'en-US', prefix: 'us' }).\n * @returns {string} The modified page name.\n */\nfunction getPageNameForAnalytics({ locale }) {\n  const { host, pathname } = new URL(window.location.href);\n  const [modifiedPath] = pathname.split('/').filter((x) => x !== locale.prefix).join(':').split('.');\n  return `${host.replace('www.', '')}:${modifiedPath}`;\n}\n\n/**\n * Creates the updated context for the request payload for analytics or personalization requests.\n *\n * @param {number} screenWidth - Screen width.\n * @param {number} screenHeight - Screen height.\n * @param {string} screenOrientation - Orientation of the screen.\n * @param {number} viewportWidth - Viewport width.\n * @param {number} viewportHeight - Viewport height.\n * @param {string} localTime - The local time in ISO format.\n * @param {number} timezoneOffset - The timezone offset.\n * @returns {Object} The updated context for the request payload.\n */\nfunction getUpdatedContext({\n  screenWidth, screenHeight, screenOrientation,\n  viewportWidth, viewportHeight, localTime, timezoneOffset,\n}) {\n  return {\n    device: {\n      screenHeight,\n      screenWidth,\n      screenOrientation,\n    },\n    environment: {\n      type: 'browser',\n      browserDetails: {\n        viewportWidth,\n        viewportHeight,\n      },\n    },\n    placeContext: {\n      localTime,\n      localTimezoneOffset: timezoneOffset,\n    },\n  };\n}\n\n/**\n * Retrieves specific MarTech cookies by their keys.\n *\n * @returns {Array<Object>} List of MarTech cookies with each\n * object containing 'key' and 'value' properties.\n */\nconst getMartechCookies = () => document.cookie.split(';')\n  .map((x) => x.trim().split('='))\n  .filter(([key]) => KNDCTR_COOKIE_KEYS.includes(key))\n  .map(([key, value]) => ({ key, value }));\n\n/**\n * Creates the request payload for Adobe Analytics and Target.\n *\n * @param {Object} params - Parameters required to create the payload.\n * @param {Object} params.updatedContext - The updated context for the request.\n * @param {string} params.pageName - The page name for the analytics request.\n * @param {Object} params.locale - The locale object containing language/region info.\n * @param {string} params.env - The environment (e.g., 'prod' for production).\n * @returns {Object} The request payload for Adobe Analytics and Target.\n */\nfunction createRequestPayload({ updatedContext, pageName, locale, env }) {\n  const prevPageName = getCookie('gpv');\n\n  const REPORT_SUITES_ID = env === 'prod' ? ['adbadobenonacdcprod'] : ['adbadobenonacdcqa'];\n  const AT_PROPERTY_VAL = getTargetPropertyBasedOnPageRegion(env);\n\n  return {\n    event: {\n      xdm: {\n        ...updatedContext,\n        identityMap: getOrGenerateUserId(),\n        web: {\n          webPageDetails: {\n            URL: window.location.href,\n            siteSection: 'www.adobe.com',\n            server: 'www.adobe.com',\n            isErrorPage: false,\n            isHomePage: false,\n            name: pageName,\n            pageViews: { value: 0 },\n          },\n          webInteraction: {\n            name: 'Martech-API',\n            type: 'other',\n            linkClicks: { value: 1 },\n          },\n          webReferrer: { URL: document.referrer },\n        },\n        timestamp: new Date().toISOString(),\n        eventType: 'decisioning.propositionFetch',\n      },\n      data: {\n        __adobe: {\n          target: {\n            is404: false, authState: 'loggedOut', hitType: 'propositionFetch', isMilo: true, adobeLocale: locale.ietf, hasGnav: true,\n          },\n        },\n        _adobe_corpnew: {\n          marketingtech: { adobe: { alloy: { approach: 'martech-API' } } },\n          digitalData: {\n            page: { pageInfo: { language: locale.ietf } },\n            diagnostic: { franklin: { implementation: 'milo' } },\n            previousPage: { pageInfo: { pageName: prevPageName } },\n            primaryUser: { primaryProfile: { profileInfo: { authState: 'loggedOut', returningStatus: 'Repeat' } } },\n          },\n        },\n      },\n    },\n    query: {\n      identity: { fetch: ['ECID'] },\n      personalization: {\n        schemas: [\n          'https://ns.adobe.com/personalization/default-content-item',\n          'https://ns.adobe.com/personalization/html-content-item',\n          'https://ns.adobe.com/personalization/json-content-item',\n          'https://ns.adobe.com/personalization/redirect-item',\n          'https://ns.adobe.com/personalization/dom-action',\n        ],\n        decisionScopes: ['__view__'],\n      },\n    },\n    meta: {\n      target: { migration: true },\n      configOverrides: {\n        com_adobe_analytics: { reportSuites: REPORT_SUITES_ID },\n        com_adobe_target: { propertyToken: AT_PROPERTY_VAL },\n      },\n      state: {\n        domain: getDomainWithoutWWW(),\n        cookiesEnabled: true,\n        entries: getMartechCookies(),\n      },\n    },\n  };\n}\n\n/**\n * Updates the specified cookies with new values if they don't already exist.\n *\n * @param {Array<Object>} cookieData - An array of objects containing\n * `key` and `value` pairs for the cookies.\n *\n */\nfunction updateMartechCookies(cookieData) {\n  cookieData?.forEach(({ key, value }) => {\n    const currentCookie = getCookie(key);\n    if (!currentCookie) {\n      setCookie(encodeURIComponent(key), value);\n    }\n  });\n}\n\n/**\n * Updates the AMCV cookie with the new ECID.\n *\n * @param {string} ECID - The Experience Cloud ID (ECID).\n */\nfunction updateAMCVCookie(ECID) {\n  const cookieValue = getCookie(AMCV_COOKIE);\n\n  if (!cookieValue) {\n    setCookie(encodeURIComponent(AMCV_COOKIE), `MCMID|${ECID}`);\n  } else if (cookieValue.indexOf('MCMID|') === -1) {\n    setCookie(encodeURIComponent(AMCV_COOKIE), `${cookieValue}|MCMID|${ECID}`);\n  }\n}\n\nfunction getUrl() {\n  const PAGE_URL = new URL(window.location.href);\n  const { host } = window.location;\n  const query = PAGE_URL.searchParams.get('env');\n  const url = 'https://edge.adobedc.net/ee/v2/interact';\n\n  /* c8 ignore start */\n  if (query || host.includes('localhost') || host.includes('.page')\n    || host.includes('.live')) {\n    return url;\n  }\n\n  /* c8 ignore start */\n  if (host.includes('stage.adobe')\n    || host.includes('corp.adobe')\n    || host.includes('graybox.adobe')) {\n    return 'https://www.stage.adobe.com/experienceedge/v2/interact';\n  }\n\n  const { origin } = window.location;\n  return `${origin}/experienceedge/v2/interact`;\n}\n\n/**\n * Loads analytics and interaction data based on the user and page context.\n * Sends the data to Adobe Analytics and Adobe Target for personalization.\n *\n * @param {Object} params - The parameters for the function.\n * @param {Object} params.locale - The locale object containing language/region info.\n * @param {string} params.env - The environment (e.g., 'prod' for production).\n * @param {string} [params.calculatedTimeout] - timeout value for the request in milliseconds.\n *\n * @returns {Promise<Object>} A promise that resolves to the\n * personalization propositions fetched from Adobe Target.\n */\nexport const loadAnalyticsAndInteractionData = async ({ locale, env, calculatedTimeout }) => {\n  const value = getCookie('kndctr_9E1005A551ED61CA0A490D45_AdobeOrg_consent');\n\n  if (value === 'general=out') {\n    return {};\n  }\n\n  // Define constants based on environment\n  const DATA_STREAM_ID = env === 'prod' ? '913eac4d-900b-45e8-9ee7-306216765cd2' : 'e065836d-be57-47ef-b8d1-999e1657e8fd';\n  const TARGET_API_URL = getUrl();\n\n  // Device and viewport information\n  const {\n    screenWidth, screenHeight,\n    screenOrientation, viewportWidth, viewportHeight,\n  } = getDeviceInfo();\n\n  // Date and Time Constants\n  const CURRENT_DATE = new Date();\n  const LOCAL_TIME = CURRENT_DATE.toISOString();\n  const LOCAL_TIMEZONE_OFFSET = CURRENT_DATE.getTimezoneOffset();\n\n  const pageName = getPageNameForAnalytics({ locale });\n\n  const updatedContext = getUpdatedContext({\n    screenWidth,\n    screenHeight,\n    screenOrientation,\n    viewportWidth,\n    viewportHeight,\n    LOCAL_TIME,\n    LOCAL_TIMEZONE_OFFSET,\n  });\n\n  // Prepare the body for the request\n  const requestBody = createRequestPayload({\n    updatedContext,\n    pageName,\n    locale,\n    env,\n  });\n\n  try {\n    const targetResp = await Promise.race([\n      fetch(`${TARGET_API_URL}?dataStreamId=${DATA_STREAM_ID}&requestId=${generateUUIDv4()}`, {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n      }),\n      new Promise((_, reject) => { setTimeout(() => reject(new Error('Request timed out')), calculatedTimeout); }),\n    ]);\n\n    if (!targetResp.ok) {\n      throw new Error('Failed to fetch interact call');\n    }\n    const targetRespJson = await targetResp.json();\n    const ECID = targetRespJson.handle\n      .flatMap((item) => item.payload)\n      .find((p) => p.namespace?.code === 'ECID')?.id || null;\n    updateAMCVCookie(ECID);\n\n    const extractedData = [];\n    targetRespJson?.handle?.forEach((item) => {\n      if (item?.type === 'state:store') {\n        item?.payload?.forEach((payload) => {\n          if (payload?.key === KNDCTR_COOKIE_KEYS[0] || payload?.key === KNDCTR_COOKIE_KEYS[1]) {\n            extractedData.push({ ...payload });\n          }\n        });\n      }\n    });\n\n    updateMartechCookies(extractedData);\n\n    // Resolve or reject based on propositions\n    const resultPayload = targetRespJson?.handle?.find((d) => d.type === 'personalization:decisions')?.payload;\n    if (resultPayload.length === 0) throw new Error('No propositions found');\n    return {\n      type: 'propositionFetch',\n      result: { propositions: resultPayload },\n    };\n  } catch (err) {\n    return {};\n  }\n};\n\nexport default { loadAnalyticsAndInteractionData };\n"],"names":["AMCV_COOKIE","KNDCTR_COOKIE_KEYS","getDomainWithoutWWW","_window","window","location","hostname","replace","generateUUIDv4","randomValues","Uint8Array","crypto","getRandomValues","uuid","forEach","byte","index","hex","toString","padStart","getCookie","key","cookie","document","split","map","x","decodeURIComponent","trim","find","_ref","k","setCookie","value","expires","arguments","length","undefined","date","Date","setTime","getTime","expiresString","concat","toUTCString","getOrGenerateUserId","_amcvCookieValue$matc","amcvCookieValue","indexOf","FPID","id","authenticatedState","primary","ECID","match","createRequestPayload","_ref6","updatedContext","pageName","locale","env","prevPageName","REPORT_SUITES_ID","AT_PROPERTY_VAL","pathname","search","getTargetPropertyBasedOnPageRegion","event","xdm","identityMap","web","webPageDetails","URL","href","siteSection","server","isErrorPage","isHomePage","name","pageViews","webInteraction","type","linkClicks","webReferrer","referrer","timestamp","toISOString","eventType","data","__adobe","target","is404","authState","hitType","isMilo","adobeLocale","ietf","hasGnav","_adobe_corpnew","marketingtech","adobe","alloy","approach","digitalData","page","pageInfo","language","diagnostic","franklin","implementation","previousPage","primaryUser","primaryProfile","profileInfo","returningStatus","query","identity","fetch","personalization","schemas","decisionScopes","meta","migration","configOverrides","com_adobe_analytics","reportSuites","com_adobe_target","propertyToken","state","domain","cookiesEnabled","entries","filter","_ref4","includes","_ref5","loadAnalyticsAndInteractionData","async","calculatedTimeout","_ref8","DATA_STREAM_ID","TARGET_API_URL","PAGE_URL","host","searchParams","get","origin","getUrl","screenWidth","screenHeight","screenOrientation","viewportWidth","viewportHeight","screen","width","height","innerWidth","innerHeight","CURRENT_DATE","LOCAL_TIME","LOCAL_TIMEZONE_OFFSET","getTimezoneOffset","_ref2","modifiedPath","prefix","join","getPageNameForAnalytics","_ref3","localTime","timezoneOffset","device","environment","browserDetails","placeContext","localTimezoneOffset","getUpdatedContext","requestBody","_targetRespJson$handl","_targetRespJson$handl2","_targetRespJson$handl3","targetResp","Promise","race","method","body","JSON","stringify","_","reject","setTimeout","Error","ok","targetRespJson","json","cookieValue","encodeURIComponent","updateAMCVCookie","handle","flatMap","item","payload","p","_p$namespace","namespace","code","extractedData","_item$payload","push","cookieData","_ref7","resultPayload","d","result","propositions","err","helpers_default"],"sourceRoot":""}