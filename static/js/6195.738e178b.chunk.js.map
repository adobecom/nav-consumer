{"version":3,"file":"static/js/6195.738e178b.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/features/placeholders.js"],"sourcesContent":["import { customFetch, getConfig } from '../utils/utils.js';\n\nconst fetchedPlaceholders = {};\nwindow.mph = {};\n\nconst getPlaceholdersPath = (config, sheet) => {\n  const path = `${config.locale.contentRoot}/placeholders.json`;\n  const query = sheet !== 'default' && typeof sheet === 'string' && sheet.length ? `?sheet=${sheet}` : '';\n  return `${path}${query}`;\n};\n\nconst fetchPlaceholders = async ({ config, sheet, placeholderRequest, placeholderPath }) => {\n  const path = placeholderPath || getPlaceholdersPath(config, sheet);\n  // eslint-disable-next-line no-async-promise-executor\n  fetchedPlaceholders[path] = fetchedPlaceholders[path] || new Promise(async (resolve) => {\n    const resp = await placeholderRequest || await customFetch(\n      { resource: path, withCacheRules: true },\n    ).catch(() => ({}));\n    const json = resp.ok ? await resp.json() : { data: [] };\n    if (json.data.length === 0) { resolve({}); return; }\n    const placeholders = {};\n    json.data.forEach((item) => {\n      window.mph[item.key] = item.value;\n      placeholders[item.key] = item.value;\n    });\n    resolve(placeholders);\n  });\n  return fetchedPlaceholders[path];\n};\n\nfunction keyToStr(key) {\n  return key.replaceAll('-', ' ');\n}\n\nasync function getPlaceholder(key, config, sheet) {\n  let defaultFetched = false;\n  const defaultLocale = 'en-US';\n\n  const getDefaultContentRoot = () => {\n    const defaultContentRoot = config.locale.contentRoot;\n    const localePrefix = config.locale.prefix;\n\n    if (!localePrefix.length) return defaultContentRoot;\n\n    // Certain locale prefixes are common beginnings of words, such as /es\n    // This could also be part of a page path, such as '/esign'\n    if (defaultContentRoot.endsWith(localePrefix)) {\n      return defaultContentRoot.replace(localePrefix, '');\n    }\n\n    return defaultContentRoot.replace(`${localePrefix}/`, '/');\n  };\n\n  const getDefaultPlaceholders = async () => {\n    const defaultConfig = {\n      locale: {\n        ietf: defaultLocale,\n        contentRoot: getDefaultContentRoot(),\n      },\n    };\n\n    const defaultPlaceholders = await fetchPlaceholders({ config: defaultConfig, sheet })\n      .catch(() => ({}));\n    defaultFetched = true;\n    return defaultPlaceholders;\n  };\n\n  if (config.placeholders?.[key]) return config.placeholders[key];\n\n  const placeholders = await fetchPlaceholders({ config, sheet }).catch(async () => {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    return defaultPlaceholders;\n  });\n\n  if (typeof placeholders?.[key] === 'string') return placeholders[key];\n\n  if (!defaultFetched && config.locale.ietf !== defaultLocale) {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    if (defaultPlaceholders?.[key]) return defaultPlaceholders[key];\n  }\n\n  return keyToStr(key);\n}\n\nexport async function replaceKey(key, config, sheet = 'default') {\n  if (typeof key !== 'string' || !key.length) return '';\n\n  const label = await getPlaceholder(key, config, sheet);\n  return label;\n}\n\nexport async function replaceKeyArray(keys, config, sheet = 'default') {\n  if (!Array.isArray(keys) || !keys.length) return [];\n\n  const promiseArr = [];\n  keys.forEach((key) => {\n    promiseArr.push(getPlaceholder(key, config, sheet));\n  });\n\n  const placeholders = await Promise.all(promiseArr);\n  return placeholders;\n}\n\nexport async function replaceText(\n  text,\n  config,\n  regex = /{{(.*?)}}|%7B%7B(.*?)%7D%7D/g,\n  sheet = 'default',\n) {\n  if (typeof text !== 'string' || !text.length) return '';\n\n  const matches = [...text.matchAll(new RegExp(regex))];\n  if (!matches.length) {\n    return text;\n  }\n  const keys = Array.from(matches, (match) => match[1] || match[2]);\n  const placeholders = await replaceKeyArray(keys, config, sheet);\n  // The .shift method is very slow, thus using normal iterator\n  let i = 0;\n  // eslint-disable-next-line no-plusplus\n  let finalText = text.replaceAll(regex, () => placeholders[i++]);\n  finalText = finalText.replace(/&nbsp;/g, '\\u00A0');\n  return finalText;\n}\n\nexport async function decoratePlaceholderArea({\n  placeholderPath,\n  placeholderRequest,\n  nodes,\n}) {\n  if (!nodes.length) return;\n  const config = getConfig();\n  await fetchPlaceholders({ placeholderPath, config, placeholderRequest });\n  const replaceNodes = nodes.map(async (nodeEl) => {\n    if (nodeEl.nodeType === Node.TEXT_NODE) {\n      nodeEl.nodeValue = await replaceText(nodeEl.nodeValue, config);\n    } else if (nodeEl.nodeType === Node.ELEMENT_NODE) {\n      const attrPromises = [...nodeEl.attributes].map(async (attr) => {\n        const attrVal = await replaceText(attr.value, config);\n        return { name: attr.name, value: attrVal };\n      });\n      const results = await Promise.all(attrPromises);\n      results.forEach(({ name, value }) => {\n        nodeEl.setAttribute(name, value);\n      });\n    }\n  });\n  await Promise.all(replaceNodes);\n}\n"],"names":["fetchedPlaceholders","window","mph","fetchPlaceholders","async","config","sheet","placeholderRequest","placeholderPath","_ref","path","getPlaceholdersPath","concat","locale","contentRoot","query","length","Promise","resp","customFetch","resource","withCacheRules","catch","json","ok","data","resolve","placeholders","forEach","item","key","value","getPlaceholder","_config$placeholders","defaultFetched","defaultLocale","getDefaultContentRoot","defaultContentRoot","localePrefix","prefix","endsWith","replace","getDefaultPlaceholders","defaultConfig","ietf","defaultPlaceholders","replaceAll","keyToStr","replaceKey","arguments","undefined","replaceKeyArray","keys","Array","isArray","promiseArr","push","all","replaceText","text","regex","matches","matchAll","RegExp","from","match","i","finalText","decoratePlaceholderArea","_ref2","nodes","getConfig","replaceNodes","map","nodeEl","nodeType","Node","TEXT_NODE","nodeValue","ELEMENT_NODE","attrPromises","attributes","attrVal","attr","name","_ref3","setAttribute"],"sourceRoot":""}