{"version":3,"file":"static/js/6290.96e683f5.chunk.js","mappings":"uKAAIA,EACAC,GAAU,EAwBP,IAAMC,EAAcC,GAAW,IAAIC,SAAQC,UAEhD,IAAKJ,EAAS,CACZ,MAAM,SAAEK,EAAA,SAAUC,GAAaJ,EACzBK,EAAOF,GAAYC,EACzBP,QA3BJK,eAA+BI,GAE7B,IAAKA,EAAM,OAAO,KAClB,MAAMC,QAAaC,MAAMF,GAEzB,IAAKC,EAAKE,GAAI,OAAO,KACrB,MAAMC,EAAY,CAAC,EACbC,QAAaJ,EAAKI,OAWxB,OAVe,IAAIC,WACOC,gBAAgBF,EAAM,iBACrBG,iBAAiB,UACpCC,SAASC,IACf,MAAMC,EAAMC,SAASC,gBAAgB,6BAA8B,OACnE,KAAOH,EAAOI,YAAYH,EAAII,YAAYL,EAAOI,YACjD,IAAIJ,EAAOM,YAAYP,SAASQ,GAASN,EAAIK,WAAWE,aAAaD,EAAKE,eAC1ER,EAAIS,UAAUC,IAAI,yBAAAC,OAA0BX,EAAIY,KAChDnB,EAAUO,EAAIY,IAAMZ,CAAA,IAEfP,CACT,CAQyBoB,CAAA,GAAAF,OAAmBvB,EAAI,yBAC5CP,GAAU,CACZ,CACAiC,EAAQlC,EAAa,IAkBvB,eAAOmC,EAAiCC,EAAOjC,GAC7C,MAAMkC,QAAiBnC,EAAWC,GAC7BkC,GACLD,EAAMlB,SAAQb,UACZ,MAAM,UAAEwB,GAAcS,EAClBT,EAAUU,SAAS,iBApB3B,SAAyBD,GAAM,IAAAE,EAC7B,MAAMC,EAAUH,EAAKI,QAAQ,MAE7B,GADAD,EAAQE,UAAY,mBACfF,EAAS,OACd,MAAMG,EAAOH,EAAQI,YAAYC,MAAM,KAEjCC,EAAUH,EAAKI,MAAMC,OAC3B,IAAKF,EAAS,OACdT,EAAKY,QAAQC,QAAUJ,EAEvB,MAAMK,GAAiB,QAATZ,EAAAI,EAAKI,aAAI,IAAAR,OAAA,EAATA,EAAYS,OAAOI,gBAAiB,QAClDf,EAAKK,UAAA,+BAAAZ,OAA2CqB,GAChDX,EAAQa,cAAcC,aAAajB,EAAMG,EAC3C,CAO4Ce,CAAgBlB,GACxD,MAAMmB,EAAWnB,EAAKT,UAAU,GAAG6B,QAAQ,QAAS,IAC9CC,EAAerB,EAAKsB,cAAc,OACxC,IAAKvB,EAASoB,IAAaE,EAAc,OACzC,MAAME,EAASvB,EAAKgB,cAChBO,EAAOC,WAAWC,OAAS,IACzBF,EAAOG,YAAc1B,EACvBA,EAAKT,UAAUC,IAAI,uBACV+B,EAAOtC,aAAee,GAC/BA,EAAKT,UAAUC,IAAI,qBACkB,OAAjC+B,EAAOP,cAAcW,SAAkBJ,EAAOP,cAAczB,UAAUC,IAAI,mBAE9EQ,EAAKT,UAAUC,IAAI,sBAAuB,sBAG9CQ,EAAK4B,mBAAmB,aAAc7B,EAASoB,GAAUU,UAAU,GAEvE,C","sources":["../node_modules/@adobecom/features/icons/icons.js"],"sourcesContent":["let fetchedIcons;\nlet fetched = false;\n\nasync function getSVGsfromFile(path) {\n  /* c8 ignore next */\n  if (!path) return null;\n  const resp = await fetch(path);\n  /* c8 ignore next */\n  if (!resp.ok) return null;\n  const miloIcons = {};\n  const text = await resp.text();\n  const parser = new DOMParser();\n  const parsedText = parser.parseFromString(text, 'image/svg+xml');\n  const symbols = parsedText.querySelectorAll('symbol');\n  symbols.forEach((symbol) => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    while (symbol.firstChild) svg.appendChild(symbol.firstChild);\n    [...symbol.attributes].forEach((attr) => svg.attributes.setNamedItem(attr.cloneNode()));\n    svg.classList.add('icon-milo', `icon-milo-${svg.id}`);\n    miloIcons[svg.id] = svg;\n  });\n  return miloIcons;\n}\n\n// eslint-disable-next-line no-async-promise-executor\nexport const fetchIcons = (config) => new Promise(async (resolve) => {\n  /* c8 ignore next */\n  if (!fetched) {\n    const { miloLibs, codeRoot } = config;\n    const base = miloLibs || codeRoot;\n    fetchedIcons = await getSVGsfromFile(`${base}/img/icons/icons.svg`);\n    fetched = true;\n  }\n  resolve(fetchedIcons);\n});\n\nfunction decorateToolTip(icon) {\n  const wrapper = icon.closest('em');\n  wrapper.className = 'tooltip-wrapper';\n  if (!wrapper) return;\n  const conf = wrapper.textContent.split('|');\n  // Text is the last part of a tooltip\n  const content = conf.pop().trim();\n  if (!content) return;\n  icon.dataset.tooltip = content;\n  // Position is the next to last part of a tooltip\n  const place = conf.pop()?.trim().toLowerCase() || 'right';\n  icon.className = `icon icon-info milo-tooltip ${place}`;\n  wrapper.parentElement.replaceChild(icon, wrapper);\n}\n\nexport default async function loadIcons(icons, config) {\n  const iconSVGs = await fetchIcons(config);\n  if (!iconSVGs) return;\n  icons.forEach(async (icon) => {\n    const { classList } = icon;\n    if (classList.contains('icon-tooltip')) decorateToolTip(icon);\n    const iconName = icon.classList[1].replace('icon-', '');\n    const existingIcon = icon.querySelector('svg');\n    if (!iconSVGs[iconName] || existingIcon) return;\n    const parent = icon.parentElement;\n    if (parent.childNodes.length > 1) {\n      if (parent.lastChild === icon) {\n        icon.classList.add('margin-inline-start');\n      } else if (parent.firstChild === icon) {\n        icon.classList.add('margin-inline-end');\n        if (parent.parentElement.tagName === 'LI') parent.parentElement.classList.add('icon-list-item');\n      } else {\n        icon.classList.add('margin-inline-start', 'margin-inline-end');\n      }\n    }\n    icon.insertAdjacentHTML('afterbegin', iconSVGs[iconName].outerHTML);\n  });\n}\n"],"names":["fetchedIcons","fetched","fetchIcons","config","Promise","async","miloLibs","codeRoot","base","path","resp","fetch","ok","miloIcons","text","DOMParser","parseFromString","querySelectorAll","forEach","symbol","svg","document","createElementNS","firstChild","appendChild","attributes","attr","setNamedItem","cloneNode","classList","add","concat","id","getSVGsfromFile","resolve","loadIcons","icons","iconSVGs","icon","contains","_conf$pop","wrapper","closest","className","conf","textContent","split","content","pop","trim","dataset","tooltip","place","toLowerCase","parentElement","replaceChild","decorateToolTip","iconName","replace","existingIcon","querySelector","parent","childNodes","length","lastChild","tagName","insertAdjacentHTML","outerHTML"],"sourceRoot":""}