{"version":3,"file":"static/js/5999.a5ae463d.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/features/dynamic-navigation/dynamic-navigation.js","../node_modules/@adobecom/features/dynamic-navigation/status.js"],"sourcesContent":["import { getMetadata } from '../../utils/utils.js';\n\nexport function foundDisableValues() {\n  const dynamicNavDisableValues = getMetadata('dynamic-nav-disable');\n  if (!dynamicNavDisableValues) return false;\n\n  const metadataPairsMap = dynamicNavDisableValues.split(',').map((pair) => pair.split(';'));\n  const foundValues = metadataPairsMap.filter(([metadataKey, metadataContent]) => {\n    const metaTagContent = getMetadata(metadataKey.toLowerCase());\n    return (metaTagContent\n        && metaTagContent.toLowerCase() === metadataContent.toLowerCase());\n  });\n\n  return foundValues.length ? foundValues : false;\n}\n\nfunction dynamicNavGroupMatches(groupMetaData) {\n  const storedGroup = window.sessionStorage.getItem('dynamicNavGroup');\n  if (groupMetaData && storedGroup) {\n    return storedGroup.toLowerCase() === groupMetaData.toLowerCase();\n  }\n  return false;\n}\n\nexport default function dynamicNav(url, key) {\n  const storageSource = 'gnavSource';\n  const storageKey = 'dynamicNavKey';\n  const storageGroup = 'dynamicNavGroup';\n\n  if (foundDisableValues()) return url;\n  const metadataContent = getMetadata('dynamic-nav');\n  const dynamicNavGroup = getMetadata('dynamic-nav-group');\n\n  if (metadataContent === 'reset') {\n    window.sessionStorage.removeItem(storageSource, url);\n    window.sessionStorage.removeItem(storageKey, key);\n    window.sessionStorage.removeItem(storageGroup, dynamicNavGroup);\n    return url;\n  }\n\n  if (metadataContent === 'entry') {\n    window.sessionStorage.setItem(storageSource, url);\n    window.sessionStorage.setItem(storageKey, key);\n    if (dynamicNavGroup) window.sessionStorage.setItem(storageGroup, dynamicNavGroup);\n    return url;\n  }\n\n  if (metadataContent === 'on' && dynamicNavGroup) {\n    if (!dynamicNavGroupMatches(dynamicNavGroup)) return url;\n  }\n\n  if (metadataContent !== 'on' || key !== window.sessionStorage.getItem(storageKey)) return url;\n\n  return window.sessionStorage.getItem(storageSource) || url;\n}\n","import { createTag, getConfig, getMetadata } from '../../utils/utils.js';\nimport { foundDisableValues } from './dynamic-navigation.js';\n\nexport const ACTIVE = 'active';\nexport const ENABLED = 'enabled';\nexport const INACTIVE = 'inactive';\nexport const RESET = 'reset';\nexport const tooltipInfo = {\n  active: 'Displayed in green, this status appears when a user is on an entry page or a page with the Dynamic Nav enabled, indicating that the nav is fully functioning.',\n  enabled: 'Displayed in yellow, this status indicates that the Dynamic Nav is set to \"on,\" but the user has not yet visited an entry page.',\n  inactive: 'Displayed in red, this status indicates that the Dynamic Nav is either not configured or has been disabled.',\n  reset: 'Displayed in grey, this status indicates that this page resets the Dynamic Nav.',\n};\n\nconst getCurrentSource = (status, storageSource, authoredSource) => {\n  if (status === 'on') {\n    return storageSource || authoredSource;\n  }\n  return authoredSource;\n};\n\nconst getStatus = (status, disabled, storageSource) => {\n  if (status === 'entry') return ACTIVE;\n\n  if (status === 'reset') return RESET;\n\n  if (disabled) return INACTIVE;\n\n  if (status === 'on' && storageSource) return ACTIVE;\n\n  if (status === 'on' && !storageSource) return ENABLED;\n\n  return INACTIVE;\n};\n\nconst processDisableValues = (valueStr, elem, foundValues = false) => {\n  if (!valueStr || valueStr.length === 0) return;\n\n  const disableValueList = valueStr.split(',');\n  const table = createTag('table');\n  const flatValues = Array.isArray(foundValues) && foundValues.flat();\n\n  table.innerHTML = `\n      <caption>Disable Values</caption>\n      <thead>\n        <tr>\n          <th>Key</th>\n          <th>Value</th>\n          <th>Match?</th>\n        </tr>\n      </thead>\n      <tbody>\n      </tbody>`;\n\n  const tBody = table.querySelector('tbody');\n\n  disableValueList.forEach((pair) => {\n    const itemRow = createTag('tr');\n    const [key, value] = pair.split(';');\n    const keyElem = createTag('td');\n    const valElem = createTag('td');\n    const matchElem = createTag('td');\n    keyElem.innerText = key;\n    valElem.innerText = value;\n    matchElem.innerText = flatValues && flatValues.includes(value) ? 'yes' : 'no';\n\n    itemRow.append(keyElem, valElem, matchElem);\n    tBody.append(itemRow);\n  });\n\n  elem.append(table);\n};\n\nconst returnPath = (url) => {\n  if (!url.startsWith('https://')) return '';\n  const sourceUrl = new URL(url);\n  return sourceUrl.pathname;\n};\n\nconst createStatusWidget = (dynamicNavKey) => {\n  const storedSource = window.sessionStorage.getItem('gnavSource');\n  const authoredSource = getMetadata('gnav-source') || 'Metadata not found: site gnav source';\n  const dynamicNavSetting = getMetadata('dynamic-nav');\n  const currentSource = getCurrentSource(dynamicNavSetting, storedSource, authoredSource);\n  const dynamicNavDisableValues = getMetadata('dynamic-nav-disable');\n  const foundValues = foundDisableValues();\n  const groupMetaSetting = getMetadata('dynamic-nav-group') || 'Group not set';\n  const storedDyanmicNavGroup = window.sessionStorage.getItem('dynamicNavGroup');\n  const groupsMatch = storedDyanmicNavGroup\n    && groupMetaSetting.toLowerCase() === storedDyanmicNavGroup.toLowerCase();\n  const groupsMatchMessage = groupsMatch ? 'Yes' : 'No';\n  const isDisabled = foundValues.length >= 1 || (!groupsMatch && groupMetaSetting !== 'Group not set');\n  const status = getStatus(dynamicNavSetting, isDisabled, storedSource);\n  const statusWidget = createTag('div', { class: 'dynamic-nav-status' });\n\n  statusWidget.innerHTML = `\n    <span class=\"title\"><span class=\"dns-badge\"></span>Dynamic Nav</span>\n    <section class=\"details hidden\">\n      <span class=\"dns-close\"></span>\n      <div class=\"message additional-info\">\n        <p>Additional Info:\n          <span>${tooltipInfo[status]}</span>\n        </p>\n      </div>\n      <p class=\"status\">Status: <span>${status}</span></p> \n      <p class=\"setting\">Setting: <span>${dynamicNavSetting}</span></p>\n      <p class=\"group\">Group: <span>${groupMetaSetting}</span></p>\n      <p class=\"group-match\">Group matches stored group: <span>${groupsMatchMessage}</span></p>\n      <p class=\"consumer-key\">Consumer key: <span>${dynamicNavKey}</span></p>\n      <div class=\"nav-source-info\">\n        <p>Authored and stored source match: <span>${authoredSource === currentSource}</span></p>\n        <p>Authored Nav Source:\n        <span>${returnPath(authoredSource)}</span></p>\n        <p>Stored Nav Source:\n        <span>${returnPath(currentSource)}</span></p>\n      </div>\n      <div class=\"disable-values\">\n      </div>\n    </section>\n  `;\n\n  processDisableValues(dynamicNavDisableValues, statusWidget.querySelector('.disable-values'), foundValues);\n  statusWidget.classList.add(status);\n\n  statusWidget.addEventListener('click', () => {\n    statusWidget.querySelector('.details').classList.toggle('hidden');\n    statusWidget.querySelector('.dns-badge').classList.toggle('dns-open');\n  });\n\n  return statusWidget;\n};\n\nexport default async function main() {\n  const { dynamicNavKey } = getConfig();\n  const statusWidget = createStatusWidget(dynamicNavKey);\n  const topNav = document.querySelector('.global-navigation');\n  const dnsClose = statusWidget.querySelector('.dns-close');\n\n  dnsClose.addEventListener('click', () => {\n    topNav.removeChild(statusWidget);\n  });\n\n  if (topNav) topNav.appendChild(statusWidget);\n}\n"],"names":["m","e","r","a","split","map","o","filter","_ref","i","n","toLowerCase","length","c","t","s","window","sessionStorage","removeItem","setItem","getItem","d","f","D","b","N","E","active","enabled","inactive","reset","S","startsWith","URL","pathname","x","p","getCurrentSource","L","l","u","v","h","g","getStatus","w","class","innerHTML","concat","arguments","undefined","Array","isArray","flat","querySelector","forEach","y","innerText","includes","append","C","classList","add","addEventListener","toggle","M","dynamicNavKey","document","removeChild","appendChild"],"sourceRoot":""}