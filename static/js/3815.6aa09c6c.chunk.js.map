{"version":3,"file":"static/js/3815.6aa09c6c.chunk.js","mappings":"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","sources":["../../milo/libs/features/placeholders.js"],"sourcesContent":["import { customFetch, getConfig, getMetadata } from '../utils/utils.js';\n\nconst fetchedPlaceholders = {};\nwindow.mph = {};\n\nconst getPlaceholdersPath = (config, sheet) => {\n  const path = `${config.locale.contentRoot}/placeholders.json`;\n  const query = sheet !== 'default' && typeof sheet === 'string' && sheet.length ? `?sheet=${sheet}` : '';\n  return `${path}${query}`;\n};\n\nconst parsePlaceholderJson = async (resp, placeholders) => {\n  try {\n    const json = resp.ok ? await resp.json() : { data: [] };\n    json.data?.forEach((item) => {\n      window.mph[item.key] = item.value;\n      placeholders[item.key] = item.value;\n    });\n  } catch (e) {\n    window.lana.log(`Error parsing placeholder json: ${e.message}`, { tags: 'placeholders', errorType: 'e' });\n  }\n};\n\nconst fetchPlaceholder = (path, placeholderRequest) => new Promise(\n  // eslint-disable-next-line no-async-promise-executor\n  async (resolve) => {\n    const resp = await placeholderRequest || await customFetch(\n      { resource: path, withCacheRules: true },\n    ).catch(() => ({}));\n    const placeholders = {};\n\n    if (Array.isArray(resp)) {\n      // Overlay placeholders\n      for (const r of resp) await parsePlaceholderJson(r, placeholders);\n    } else {\n      await parsePlaceholderJson(resp, placeholders);\n    }\n\n    resolve(placeholders);\n  },\n);\n\nconst fetchPlaceholders = async ({\n  config,\n  sheet,\n  placeholderRequest,\n  placeholderPath,\n}) => {\n  const path = placeholderPath || getPlaceholdersPath(config, sheet);\n\n  fetchedPlaceholders[path] ||= fetchPlaceholder(path, placeholderRequest);\n\n  return fetchedPlaceholders[path];\n};\n\nfunction keyToStr(key) {\n  return key.replaceAll('-', ' ');\n}\n\nasync function getPlaceholder(key, config, sheet) {\n  let defaultFetched = false;\n  const defaultLocale = 'en-US';\n  const geoLocDisabled = getMetadata('disable-geo-placeholders') || 'off';\n\n  const getDefaultContentRoot = () => {\n    const defaultContentRoot = config.locale.contentRoot;\n    const localePrefix = config.locale.prefix;\n\n    if (!localePrefix.length) return defaultContentRoot;\n\n    // Certain locale prefixes are common beginnings of words, such as /es\n    // This could also be part of a page path, such as '/esign'\n    if (defaultContentRoot.endsWith(localePrefix)) {\n      return defaultContentRoot.replace(localePrefix, '');\n    }\n\n    return defaultContentRoot.replace(`${localePrefix}/`, '/');\n  };\n\n  const getDefaultPlaceholders = async () => {\n    const defaultConfig = {\n      locale: {\n        ietf: defaultLocale,\n        contentRoot: getDefaultContentRoot(),\n      },\n    };\n\n    const defaultPlaceholders = await fetchPlaceholders({ config: defaultConfig, sheet })\n      .catch(() => ({}));\n    defaultFetched = true;\n    return defaultPlaceholders;\n  };\n\n  if (config.placeholders?.[key]) return config.placeholders[key];\n  let placeholders;\n\n  if (geoLocDisabled === 'on') {\n    placeholders = await getDefaultPlaceholders();\n  } else {\n    placeholders = await fetchPlaceholders({ config, sheet });\n  }\n\n  if (typeof placeholders?.[key] === 'string') return placeholders[key];\n\n  if (!defaultFetched && config.locale.ietf !== defaultLocale) {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    if (defaultPlaceholders?.[key]) return defaultPlaceholders[key];\n  }\n\n  return keyToStr(key);\n}\n\nexport async function replaceKey(key, config, sheet = 'default') {\n  if (typeof key !== 'string' || !key.length) return '';\n\n  const label = await getPlaceholder(key, config, sheet);\n  return label;\n}\n\nexport async function replaceKeyArray(keys, config, sheet = 'default') {\n  if (!Array.isArray(keys) || !keys.length) return [];\n\n  const promiseArr = [];\n  keys.forEach((key) => {\n    promiseArr.push(getPlaceholder(key, config, sheet));\n  });\n\n  const placeholders = await Promise.all(promiseArr);\n  return placeholders;\n}\n\nexport async function replaceText(\n  text,\n  config,\n  regex = /{{(.*?)}}|%7B%7B(.*?)%7D%7D/g,\n  sheet = 'default',\n) {\n  if (typeof text !== 'string' || !text.length) return '';\n\n  const matches = [...text.matchAll(new RegExp(regex))];\n  if (!matches.length) {\n    return text;\n  }\n  const keys = Array.from(matches, (match) => match[1] || match[2]);\n  const placeholders = await replaceKeyArray(keys, config, sheet);\n  // The .shift method is very slow, thus using normal iterator\n  let i = 0;\n  // eslint-disable-next-line no-plusplus\n  let finalText = text.replaceAll(regex, () => placeholders[i++]);\n  finalText = finalText.replace(/&nbsp;/g, '\\u00A0');\n  return finalText;\n}\n\nexport async function decoratePlaceholderArea({\n  placeholderPath,\n  placeholderRequest,\n  nodes,\n}) {\n  if (!nodes.length) return;\n  const config = getConfig();\n  await fetchPlaceholders({ placeholderPath, config, placeholderRequest });\n  const replaceNodes = nodes.map(async (nodeEl) => {\n    if (nodeEl.nodeType === Node.TEXT_NODE) {\n      nodeEl.nodeValue = await replaceText(nodeEl.nodeValue, config);\n    } else if (nodeEl.nodeType === Node.ELEMENT_NODE) {\n      const attrPromises = [...nodeEl.attributes].map(async (attr) => {\n        const attrVal = await replaceText(attr.value, config);\n        return { name: attr.name, value: attrVal };\n      });\n      const results = await Promise.all(attrPromises);\n      results.forEach(({ name, value }) => {\n        nodeEl.setAttribute(name, value);\n      });\n    }\n  });\n  await Promise.all(replaceNodes);\n}\n"],"names":["w","window","mph","g","async","e","t","_data","ok","json","data","forEach","a","key","value","r","lana","log","concat","message","tags","errorType","f","config","sheet","placeholderRequest","placeholderPath","_ref","o","getPlaceholdersPath","locale","contentRoot","length","m","fetchPlaceholder","Promise","d","resource","withCacheRules","catch","Array","isArray","n","A","P","_t$placeholders","_c","c","h","i","getDefaultContentRoot","l","s","prefix","endsWith","replace","u","ietf","placeholders","replaceAll","T","R","arguments","undefined","b","push","all","y","matchAll","RegExp","from","E","_ref2","nodes","p","map","nodeType","Node","TEXT_NODE","nodeValue","ELEMENT_NODE","attributes","name","_ref3","setAttribute"],"sourceRoot":""}