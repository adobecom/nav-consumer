{"version":3,"file":"static/js/3323.2655c812.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/utils/federated.js","../node_modules/@adobecom/features/icons/icons.js"],"sourcesContent":["import { getConfig, SLD } from './utils.js';\n\nlet federatedContentRoot;\n/* eslint-disable import/prefer-default-export */\nexport const getFederatedContentRoot = () => {\n  const cdnWhitelistedOrigins = [\n    'https://www.adobe.com',\n    'https://business.adobe.com',\n    'https://blog.adobe.com',\n    'https://milo.adobe.com',\n    'https://news.adobe.com',\n  ];\n  const { allowedOrigins = [], origin: configOrigin } = getConfig();\n  if (federatedContentRoot) return federatedContentRoot;\n  // Non milo consumers will have its origin from congig\n  const origin = configOrigin || window.location.origin;\n\n  federatedContentRoot = [...allowedOrigins, ...cdnWhitelistedOrigins].some((o) => origin.replace('.stage', '') === o)\n    ? origin\n    : 'https://www.adobe.com';\n\n  if (origin.includes('localhost') || origin.includes(`.${SLD}.`)) {\n    federatedContentRoot = `https://main--federal--adobecom.aem.${origin.endsWith('.live') ? 'live' : 'page'}`;\n  }\n\n  return federatedContentRoot;\n};\n\n// TODO we should match the akamai patterns /locale/federal/ at the start of the url\n// and make the check more strict.\nexport const getFederatedUrl = (url = '') => {\n  if (typeof url !== 'string' || !url.includes('/federal/')) return url;\n  if (url.startsWith('/')) return `${getFederatedContentRoot()}${url}`;\n  try {\n    const { pathname, search, hash } = new URL(url);\n    return `${getFederatedContentRoot()}${pathname}${search}${hash}`;\n  } catch (e) {\n    window.lana?.log(`getFederatedUrl errored parsing the URL: ${url}: ${e.toString()}`);\n  }\n  return url;\n};\n\nlet fedsPlaceholderConfig;\nexport const getFedsPlaceholderConfig = ({ useCache = true } = {}) => {\n  if (useCache && fedsPlaceholderConfig) return fedsPlaceholderConfig;\n\n  const { locale, placeholders } = getConfig();\n  const libOrigin = getFederatedContentRoot();\n\n  fedsPlaceholderConfig = {\n    locale: {\n      ...locale,\n      contentRoot: `${libOrigin}${locale.prefix}/federal/globalnav`,\n    },\n    placeholders,\n  };\n\n  return fedsPlaceholderConfig;\n};\n","import { getFederatedContentRoot } from '../../utils/federated.js';\nimport { loadLink, loadStyle } from '../../utils/utils.js';\n\nlet fetchedIcons;\nlet fetched = false;\nconst federalIcons = {};\n\nasync function getSVGsfromFile(path) {\n  /* c8 ignore next */\n  if (!path) return null;\n  const resp = await fetch(path);\n  /* c8 ignore next */\n  if (!resp.ok) return null;\n  const miloIcons = {};\n  const text = await resp.text();\n  const parser = new DOMParser();\n  const parsedText = parser.parseFromString(text, 'image/svg+xml');\n  const symbols = parsedText.querySelectorAll('symbol');\n  symbols.forEach((symbol) => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    while (symbol.firstChild) svg.appendChild(symbol.firstChild);\n    [...symbol.attributes].forEach((attr) => svg.attributes.setNamedItem(attr.cloneNode()));\n    svg.classList.add('icon-milo', `icon-milo-${svg.id}`);\n    miloIcons[svg.id] = svg;\n  });\n  return miloIcons;\n}\n\n// TODO: remove after all consumers have stopped calling this method\n// eslint-disable-next-line no-async-promise-executor\nexport const fetchIcons = (config) => new Promise(async (resolve) => {\n  /* c8 ignore next */\n  if (!fetched) {\n    const { miloLibs, codeRoot } = config;\n    const base = miloLibs || codeRoot;\n    fetchedIcons = await getSVGsfromFile(`${base}/img/icons/icons.svg`);\n    fetched = true;\n  }\n  resolve(fetchedIcons);\n});\n\nasync function decorateToolTip(icon) {\n  const wrapper = icon.closest('em');\n  if (!wrapper) return;\n  wrapper.className = 'tooltip-wrapper';\n  const conf = wrapper.textContent.split('|');\n  // Text is the last part of a tooltip\n  const content = conf.pop().trim();\n  if (!content) return;\n  icon.dataset.tooltip = content;\n  // Position is the next to last part of a tooltip\n  const place = conf.pop()?.trim().toLowerCase() || 'right';\n  const defaultIcon = 'info-outline';\n  icon.className = `icon icon-${defaultIcon} milo-tooltip ${place}`;\n  icon.dataset.name = defaultIcon;\n  wrapper.parentElement.replaceChild(icon, wrapper);\n}\n\nexport function getIconData(icon) {\n  const fedRoot = getFederatedContentRoot();\n  const name = [...icon.classList].find((c) => c.startsWith('icon-'))?.substring(5);\n  const path = `${fedRoot}/federal/assets/icons/svgs/${name}.svg`;\n  return { path, name };\n}\n\nfunction preloadInViewIconResources(config) {\n  const { base } = config;\n  loadStyle(`${base}/features/icons/icons.css`);\n}\n\nconst preloadInViewIcons = async (icons = []) => icons.forEach((icon) => {\n  const { path } = getIconData(icon);\n  loadLink(path, { rel: 'preload', as: 'fetch', crossorigin: 'anonymous' });\n});\n\nfunction filterDuplicatedIcons(icons) {\n  if (!icons.length) return [];\n  const uniqueIconKeys = new Set();\n  const uniqueIcons = [];\n  for (const icon of icons) {\n    const key = [...icon.classList].find((c) => c.startsWith('icon-'))?.substring(5);\n    if (!uniqueIconKeys.has(key)) {\n      uniqueIconKeys.add(key);\n      uniqueIcons.push(icon);\n    }\n  }\n  return uniqueIcons;\n}\n\nexport async function decorateIcons(area, icons, config) {\n  if (!icons.length) return;\n  const uniqueIcons = filterDuplicatedIcons(icons);\n  if (!uniqueIcons.length) return;\n  preloadInViewIcons(uniqueIcons);\n  preloadInViewIconResources(config);\n  icons.forEach((icon) => {\n    const iconName = [...icon.classList].find((c) => c.startsWith('icon-'))?.substring(5);\n    if (!iconName) return;\n    icon.dataset.name = iconName;\n  });\n}\n\nexport default async function loadIcons(icons) {\n  const fedRoot = getFederatedContentRoot();\n  const iconRequests = [];\n  const iconsToFetch = new Map();\n\n  icons.forEach(async (icon) => {\n    const isToolTip = icon.classList.contains('icon-tooltip');\n    if (isToolTip) decorateToolTip(icon);\n    const iconName = icon.dataset.name;\n    if (icon.dataset.svgInjected || !iconName) return;\n    if (!federalIcons[iconName] && !iconsToFetch.has(iconName)) {\n      const url = `${fedRoot}/federal/assets/icons/svgs/${iconName}.svg`;\n      iconsToFetch.set(iconName, fetch(url)\n        .then(async (res) => {\n          if (!res.ok) throw new Error(`Failed to fetch SVG for ${iconName}: ${res.statusText}`);\n          const text = await res.text();\n          const parser = new DOMParser();\n          const svgDoc = parser.parseFromString(text, 'image/svg+xml');\n          const svgElement = svgDoc.querySelector('svg');\n          if (!svgElement) {\n            window.lana?.log(`No SVG element found in fetched content for ${iconName}`);\n            return;\n          }\n          const svgClone = svgElement.cloneNode(true);\n          svgClone.classList.add('icon-milo', `icon-milo-${iconName}`);\n          federalIcons[iconName] = svgClone;\n        })\n        /* c8 ignore next 3 */\n        .catch((error) => {\n          window.lana?.log(`Error fetching SVG for ${iconName}:`, error);\n        }));\n    }\n    iconRequests.push(iconsToFetch.get(iconName));\n    const parent = icon.parentElement;\n    if (parent && parent.parentElement.tagName === 'LI') parent.parentElement.classList.add('icon-list-item');\n  });\n\n  await Promise.all(iconRequests);\n\n  icons.forEach((icon) => {\n    const iconName = icon.dataset.name;\n    if (iconName && federalIcons[iconName] && !icon.dataset.svgInjected) {\n      const svgClone = federalIcons[iconName].cloneNode(true);\n      icon.appendChild(svgClone);\n      icon.dataset.svgInjected = 'true';\n    }\n  });\n}\n"],"names":["federatedContentRoot","fedsPlaceholderConfig","getFederatedContentRoot","allowedOrigins","origin","configOrigin","getConfig","window","location","some","o","replace","includes","concat","SLD","endsWith","getFederatedUrl","url","arguments","length","undefined","startsWith","pathname","search","hash","URL","e","_window$lana","lana","log","toString","getFedsPlaceholderConfig","useCache","locale","placeholders","libOrigin","contentRoot","prefix","fetchedIcons","fetched","federalIcons","fetchIcons","config","Promise","async","miloLibs","codeRoot","base","path","resp","fetch","ok","miloIcons","text","DOMParser","parseFromString","querySelectorAll","forEach","symbol","svg","document","createElementNS","firstChild","appendChild","attributes","attr","setNamedItem","cloneNode","classList","add","id","getSVGsfromFile","resolve","getIconData","icon","_find","fedRoot","name","find","c","substring","preloadInViewIcons","loadLink","rel","as","crossorigin","decorateIcons","area","icons","uniqueIcons","uniqueIconKeys","Set","_find2","key","has","push","filterDuplicatedIcons","loadStyle","preloadInViewIconResources","_find3","iconName","dataset","loadIcons","iconRequests","iconsToFetch","Map","contains","_conf$pop","wrapper","closest","className","conf","textContent","split","content","pop","trim","tooltip","place","toLowerCase","defaultIcon","parentElement","replaceChild","decorateToolTip","svgInjected","set","then","res","Error","statusText","svgElement","querySelector","svgClone","catch","error","_window$lana2","get","parent","tagName","all"],"sourceRoot":""}