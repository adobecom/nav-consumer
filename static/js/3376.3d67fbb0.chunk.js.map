{"version":3,"file":"static/js/3376.3d67fbb0.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/blocks/global-navigation/features/breadcrumbs/breadcrumbs.js"],"sourcesContent":["import { getMetadata, getConfig } from '../../../../utils/utils.js';\nimport { toFragment, lanaLog } from '../../utilities/utilities.js';\nimport { getFederatedUrl } from '../../../../utils/federated.js';\n\nconst metadata = {\n  seo: 'breadcrumbs-seo',\n  seoLegacy: 'breadcrumb-seo',\n  fromFile: 'breadcrumbs-from-file',\n  showCurrent: 'breadcrumbs-show-current-page',\n  hiddenEntries: 'breadcrumbs-hidden-entries',\n  pageTitle: 'breadcrumbs-page-title',\n  base: 'breadcrumbs-base',\n  fromUrl: 'breadcrumbs-from-url',\n};\n\nconst setBreadcrumbSEO = (breadcrumbs) => {\n  const seoDisabled = (getMetadata(metadata.seo) || getMetadata(metadata.seoLegacy)) === 'off';\n  if (seoDisabled || !breadcrumbs) return;\n  const breadcrumbsSEO = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [],\n  };\n  breadcrumbs.querySelectorAll('ul > li').forEach((item, idx) => {\n    const link = item.querySelector('a');\n    breadcrumbsSEO.itemListElement.push({\n      '@type': 'ListItem',\n      position: idx + 1,\n      name: link ? link.innerText.trim() : item.innerText.trim(),\n      item: link?.href,\n    });\n  });\n  const script = toFragment`<script type=\"application/ld+json\">${JSON.stringify(\n    breadcrumbsSEO,\n  )}</script>`;\n  document.head.append(script);\n};\n\nconst createBreadcrumbs = (element) => {\n  if (!element) return null;\n  const ul = element.querySelector('ul');\n  const pageTitle = getMetadata(metadata.pageTitle);\n  if (pageTitle || getMetadata(metadata.showCurrent) === 'on') {\n    ul.append(toFragment`\n      <li>\n        ${pageTitle || document.title}\n      </li>\n    `);\n  }\n\n  const hiddenEntries = getMetadata(metadata.hiddenEntries)\n    ?.toLowerCase()\n    .split(',')\n    .map((item) => item.trim()) || [];\n\n  ul.querySelectorAll('li').forEach((li) => {\n    if (hiddenEntries.includes(li.innerText?.toLowerCase().trim())) li.remove();\n  });\n\n  const noTransform = element.classList.contains('no-transform') ? ' no-transform' : '';\n\n  const breadcrumbs = toFragment`\n    <div class=\"feds-breadcrumbs-wrapper\">\n      <nav class=\"feds-breadcrumbs${noTransform}\" aria-label=\"Breadcrumb\">${ul}</nav>\n    </div>\n  `;\n  ul.querySelector('li:last-of-type')?.setAttribute('aria-current', 'page');\n  return breadcrumbs;\n};\n\nconst createWithBase = async (el) => {\n  const element = el || toFragment`<div><ul></ul></div>`;\n  const url = getFederatedUrl(getMetadata(metadata.base));\n  if (!url) return null;\n  try {\n    const resp = await fetch(`${url}.plain.html`);\n    const text = await resp.text();\n    const base = new DOMParser().parseFromString(text, 'text/html').body;\n    element.querySelector('ul')?.prepend(...base.querySelectorAll('li'));\n    return createBreadcrumbs(element);\n  } catch (e) {\n    lanaLog({ e, message: 'Breadcrumbs failed fetching base', tags: 'errorType=info,module=gnav-breadcrumbs' });\n    return null;\n  }\n};\n\nconst fromUrl = () => {\n  if (getMetadata(metadata.fromUrl) !== 'on') return null;\n  const list = toFragment`<ul></ul>`;\n  const paths = document.location.pathname\n    .replace((getConfig().locale?.prefix || ''), '')\n    .split('/')\n    .filter((n) => n);\n\n  for (let i = 0; i < paths.length; i += 1) {\n    list.append(toFragment`\n      <li>\n        <a href=\"/${paths.slice(0, i + 1).join('/')}\">${paths[i].replaceAll('-', ' ')}</a>\n      </li>\n    `);\n  }\n  return createBreadcrumbs(toFragment`<div>${list}</div>`);\n};\n\nexport default async function init(el) {\n  try {\n    const breadcrumbsEl = await createWithBase(el) || createBreadcrumbs(el) || fromUrl();\n    setBreadcrumbSEO(breadcrumbsEl);\n    return breadcrumbsEl;\n  } catch (e) {\n    lanaLog({ e, message: 'Breadcrumbs failed rendering', tags: 'errorType=error,module=gnav-breadcrumbs' });\n    return null;\n  }\n}\n"],"names":["_a","metadata","setBreadcrumbSEO","breadcrumbs","getMetadata","breadcrumbsSEO","itemListElement","querySelectorAll","forEach","item","idx","link","querySelector","push","position","name","innerText","trim","href","script","toFragment","__template","JSON","stringify","document","head","append","createBreadcrumbs","element","_getMetadata","_ul$querySelector","ul","pageTitle","_templateObject","_taggedTemplateLiteral","title","hiddenEntries","toLowerCase","split","map","li","_li$innerText","includes","remove","noTransform","classList","contains","_templateObject2","setAttribute","createWithBase","async","el","_templateObject3","url","getFederatedUrl","_element$querySelecto","resp","fetch","concat","text","base","DOMParser","parseFromString","body","prepend","e","lanaLog","message","tags","fromUrl","_getConfig$locale","list","_templateObject4","paths","location","pathname","replace","getConfig","locale","prefix","filter","n","i","length","_templateObject5","slice","join","replaceAll","_templateObject6","init","breadcrumbsEl"],"sourceRoot":""}