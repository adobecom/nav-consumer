{"version":3,"file":"static/js/731.b47e123c.chunk.js","mappings":"uLAEIA,E,UAESC,EAA0BA,KACrC,MAOM,eAAEC,EAAiB,GAAIC,OAAQC,IAAiBC,EAAAA,EAAAA,aACtD,GAAIL,EAAsB,OAAOA,EAEjC,MAAMG,EAASC,GAAgBE,OAAOC,SAASJ,OAU/C,OARAH,EAAuB,IAAIE,EAXzB,wBACA,6BACA,yBACA,yBACA,0BAOmEM,MAAMC,GAAMN,EAAOO,QAAQ,SAAU,MAAQD,IAC9GN,EACA,yBAEAA,EAAOQ,SAAS,cAAgBR,EAAOQ,SAAA,IAAAC,OAAaC,EAAAA,IAAG,SACzDb,EAAA,uCAAAY,OAA8DT,EAAOW,SAAS,SAAW,OAAS,SAG7Fd,CAAA,EAKIe,EAAkB,WAAc,IAAbC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAM,GACpC,GAAmB,kBAARD,IAAqBA,EAAIL,SAAS,aAAc,OAAOK,EAClE,GAAIA,EAAII,WAAW,KAAM,MAAO,GAAPR,OAAUX,KAAyBW,OAAGI,GAC/D,IACE,MAAM,SAAEK,EAAA,OAAUC,EAAA,KAAQC,GAAS,IAAIC,IAAIR,GAC3C,MAAO,GAAPJ,OAAUX,KAAyBW,OAAGS,GAAQT,OAAGU,GAAMV,OAAGW,EAC5D,CAAE,MAAOE,GAAG,IAAAC,EACH,QAAPA,EAAApB,OAAOqB,YAAA,IAAAD,GAAPA,EAAaE,IAAA,4CAAAhB,OAAgDI,EAAG,MAAAJ,OAAKa,EAAEI,YACzE,CACA,OAAOb,CACT,C","sources":["../node_modules/@adobecom/utils/federated.js"],"sourcesContent":["import { getConfig, SLD } from './utils.js';\n\nlet federatedContentRoot;\n/* eslint-disable import/prefer-default-export */\nexport const getFederatedContentRoot = () => {\n  const cdnWhitelistedOrigins = [\n    'https://www.adobe.com',\n    'https://business.adobe.com',\n    'https://blog.adobe.com',\n    'https://milo.adobe.com',\n    'https://news.adobe.com',\n  ];\n  const { allowedOrigins = [], origin: configOrigin } = getConfig();\n  if (federatedContentRoot) return federatedContentRoot;\n  // Non milo consumers will have its origin from congig\n  const origin = configOrigin || window.location.origin;\n\n  federatedContentRoot = [...allowedOrigins, ...cdnWhitelistedOrigins].some((o) => origin.replace('.stage', '') === o)\n    ? origin\n    : 'https://www.adobe.com';\n\n  if (origin.includes('localhost') || origin.includes(`.${SLD}.`)) {\n    federatedContentRoot = `https://main--federal--adobecom.aem.${origin.endsWith('.live') ? 'live' : 'page'}`;\n  }\n\n  return federatedContentRoot;\n};\n\n// TODO we should match the akamai patterns /locale/federal/ at the start of the url\n// and make the check more strict.\nexport const getFederatedUrl = (url = '') => {\n  if (typeof url !== 'string' || !url.includes('/federal/')) return url;\n  if (url.startsWith('/')) return `${getFederatedContentRoot()}${url}`;\n  try {\n    const { pathname, search, hash } = new URL(url);\n    return `${getFederatedContentRoot()}${pathname}${search}${hash}`;\n  } catch (e) {\n    window.lana?.log(`getFederatedUrl errored parsing the URL: ${url}: ${e.toString()}`);\n  }\n  return url;\n};\n"],"names":["federatedContentRoot","getFederatedContentRoot","allowedOrigins","origin","configOrigin","getConfig","window","location","some","o","replace","includes","concat","SLD","endsWith","getFederatedUrl","url","arguments","length","undefined","startsWith","pathname","search","hash","URL","e","_window$lana","lana","log","toString"],"sourceRoot":""}