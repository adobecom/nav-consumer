{"version":3,"file":"static/js/1926.c8d74423.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/features/placeholders.js"],"sourcesContent":["import { customFetch, getConfig, getMetadata } from '../utils/utils.js';\n\nconst fetchedPlaceholders = {};\nwindow.mph = {};\n\nconst getPlaceholdersPath = (config, sheet) => {\n  const path = `${config.locale.contentRoot}/placeholders.json`;\n  const query = sheet !== 'default' && typeof sheet === 'string' && sheet.length ? `?sheet=${sheet}` : '';\n  return `${path}${query}`;\n};\n\nconst parsePlaceholderJson = async (resp, placeholders) => {\n  try {\n    const json = resp.ok ? await resp.json() : { data: [] };\n    json.data?.forEach((item) => {\n      window.mph[item.key] = item.value;\n      placeholders[item.key] = item.value;\n    });\n  } catch (e) {\n    window.lana.log(`Error parsing placeholder json: ${e.message}`, { tags: 'placeholders', errorType: 'e' });\n  }\n};\n\nconst fetchPlaceholder = (path, placeholderRequest) => new Promise(\n  // eslint-disable-next-line no-async-promise-executor\n  async (resolve) => {\n    const resp = await placeholderRequest || await customFetch(\n      { resource: path, withCacheRules: true },\n    ).catch(() => ({}));\n    const placeholders = {};\n\n    if (Array.isArray(resp)) {\n      // Overlay placeholders\n      for (const r of resp) await parsePlaceholderJson(r, placeholders);\n    } else {\n      await parsePlaceholderJson(resp, placeholders);\n    }\n\n    resolve(placeholders);\n  },\n);\n\nconst fetchPlaceholders = async ({\n  config,\n  sheet,\n  placeholderRequest,\n  placeholderPath,\n}) => {\n  const path = placeholderPath || getPlaceholdersPath(config, sheet);\n\n  fetchedPlaceholders[path] ||= fetchPlaceholder(path, placeholderRequest);\n\n  return fetchedPlaceholders[path];\n};\n\nfunction keyToStr(key) {\n  return key.replaceAll('-', ' ');\n}\n\nasync function getPlaceholder(key, config, sheet) {\n  let defaultFetched = false;\n  const defaultLocale = 'en-US';\n  const geoLocDisabled = getMetadata('disable-geo-placeholders') || 'off';\n\n  const getDefaultContentRoot = () => {\n    const defaultContentRoot = config.locale.contentRoot;\n    const localePrefix = config.locale.prefix;\n\n    if (!localePrefix.length) return defaultContentRoot;\n\n    // Certain locale prefixes are common beginnings of words, such as /es\n    // This could also be part of a page path, such as '/esign'\n    if (defaultContentRoot.endsWith(localePrefix)) {\n      return defaultContentRoot.replace(localePrefix, '');\n    }\n\n    return defaultContentRoot.replace(`${localePrefix}/`, '/');\n  };\n\n  const getDefaultPlaceholders = async () => {\n    const defaultConfig = {\n      locale: {\n        ietf: defaultLocale,\n        contentRoot: getDefaultContentRoot(),\n      },\n    };\n\n    const defaultPlaceholders = await fetchPlaceholders({ config: defaultConfig, sheet })\n      .catch(() => ({}));\n    defaultFetched = true;\n    return defaultPlaceholders;\n  };\n\n  if (config.placeholders?.[key]) return config.placeholders[key];\n  let placeholders;\n\n  if (geoLocDisabled === 'on') {\n    placeholders = await getDefaultPlaceholders();\n  } else {\n    placeholders = await fetchPlaceholders({ config, sheet });\n  }\n\n  if (typeof placeholders?.[key] === 'string') return placeholders[key];\n\n  if (!defaultFetched && config.locale.ietf !== defaultLocale) {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    if (defaultPlaceholders?.[key]) return defaultPlaceholders[key];\n  }\n\n  return keyToStr(key);\n}\n\nexport async function replaceKey(key, config, sheet = 'default') {\n  if (typeof key !== 'string' || !key.length) return '';\n\n  const label = await getPlaceholder(key, config, sheet);\n  return label;\n}\n\nexport async function replaceKeyArray(keys, config, sheet = 'default') {\n  if (!Array.isArray(keys) || !keys.length) return [];\n\n  const promiseArr = [];\n  keys.forEach((key) => {\n    promiseArr.push(getPlaceholder(key, config, sheet));\n  });\n\n  const placeholders = await Promise.all(promiseArr);\n  return placeholders;\n}\n\nexport async function replaceText(\n  text,\n  config,\n  regex = /{{(.*?)}}|%7B%7B(.*?)%7D%7D/g,\n  sheet = 'default',\n) {\n  if (typeof text !== 'string' || !text.length) return '';\n\n  const matches = [...text.matchAll(new RegExp(regex))];\n  if (!matches.length) {\n    return text;\n  }\n  const keys = Array.from(matches, (match) => match[1] || match[2]);\n  const placeholders = await replaceKeyArray(keys, config, sheet);\n  // The .shift method is very slow, thus using normal iterator\n  let i = 0;\n  // eslint-disable-next-line no-plusplus\n  let finalText = text.replaceAll(regex, () => placeholders[i++]);\n  finalText = finalText.replace(/&nbsp;/g, '\\u00A0');\n  return finalText;\n}\n\nexport async function decoratePlaceholderArea({\n  placeholderPath,\n  placeholderRequest,\n  nodes,\n}) {\n  if (!nodes.length) return;\n  const config = getConfig();\n  await fetchPlaceholders({ placeholderPath, config, placeholderRequest });\n  const replaceNodes = nodes.map(async (nodeEl) => {\n    if (nodeEl.nodeType === Node.TEXT_NODE) {\n      nodeEl.nodeValue = await replaceText(nodeEl.nodeValue, config);\n    } else if (nodeEl.nodeType === Node.ELEMENT_NODE) {\n      const attrPromises = [...nodeEl.attributes].map(async (attr) => {\n        const attrVal = await replaceText(attr.value, config);\n        return { name: attr.name, value: attrVal };\n      });\n      const results = await Promise.all(attrPromises);\n      results.forEach(({ name, value }) => {\n        nodeEl.setAttribute(name, value);\n      });\n    }\n  });\n  await Promise.all(replaceNodes);\n}\n"],"names":["fetchedPlaceholders","window","mph","parsePlaceholderJson","async","resp","placeholders","_json$data","ok","json","data","forEach","item","key","value","e","lana","log","concat","message","tags","errorType","fetchPlaceholders","config","sheet","placeholderRequest","placeholderPath","_ref","path","getPlaceholdersPath","locale","contentRoot","query","length","fetchPlaceholder","Promise","customFetch","resource","withCacheRules","catch","Array","isArray","r","resolve","getPlaceholder","_config$placeholders","_placeholders","defaultFetched","defaultLocale","geoLocDisabled","getMetadata","getDefaultContentRoot","defaultContentRoot","localePrefix","prefix","endsWith","replace","getDefaultPlaceholders","defaultConfig","ietf","defaultPlaceholders","replaceAll","keyToStr","replaceKey","arguments","undefined","replaceKeyArray","keys","promiseArr","push","all","replaceText","text","regex","matches","matchAll","RegExp","from","match","i","finalText","decoratePlaceholderArea","_ref2","nodes","getConfig","replaceNodes","map","nodeEl","nodeType","Node","TEXT_NODE","nodeValue","ELEMENT_NODE","attrPromises","attributes","attrVal","attr","name","_ref3","setAttribute"],"sourceRoot":""}