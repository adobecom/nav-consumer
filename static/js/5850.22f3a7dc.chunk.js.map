{"version":3,"file":"static/js/5850.22f3a7dc.chunk.js","mappings":"gKAsCe,SAARA,EAAkCC,GACvCA,EAAEC,UAAUC,IAAI,cAChB,MAAMC,EAAmBA,KAAM,IAAAC,EAC7B,MAAMC,EAAmB,QAAnBD,EAAYE,OAAOC,oBAAA,IAAAH,OAAA,EAAPA,EAAqBI,qBACvC,OAAO,OAAAH,QAAA,IAAAA,OAAA,EAAAA,EAAWI,SAAS,YAAY,OAAAJ,QAAA,IAAAA,OAAA,EAAAA,EAAWI,SAAS,SAAO,EAyBpET,EAAEU,iBAAiB,SAASC,UAE1B,IAAIC,EADJC,EAAEC,iBAEuC,QAArCC,EAAAA,EAAAA,aAAY,uBAA+BH,EApEnD,SAAmBZ,GACjB,MAAM,KAAEgB,IAASC,EAAAA,EAAAA,cACjBC,EAAAA,EAAAA,WAAA,GAAAC,OAAaH,EAAI,wDACjB,MAAMI,GAAQC,EAAAA,EAAAA,WAAU,MAAO,CAAEC,MAAO,eACxCF,EAAMG,aAAcR,EAAAA,EAAAA,aAAY,2BAA6B,GAC7D,MAAMS,GAAKH,EAAAA,EAAAA,WAAU,MAAO,CAAEC,MAAO,eACrCE,EAAGC,MAAMC,QAAU,QACnB,MAAMC,GAAcN,EAAAA,EAAAA,WAAU,MAAO,CAAEC,MAAO,QAAUE,GACxDI,OAAOC,OAAOF,EAAYF,MAAO,CAC/BK,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,gBAAiB,UACjBC,UAAW,OACXC,SAAU,WAEZ,MAAMC,GAAYf,EAAAA,EAAAA,WAAU,MAAO,CAAEC,MAAO,kBAAoB,CAACF,EAAOO,IAExE,OADA3B,EAAEqC,YAAYD,GACPA,CACT,CAiD4DE,CAAUtC,IAClE,MAAMuC,QAzBC,IAAIC,SAASC,IAClB,MAAMC,EAAkBC,YAAW,IAAMF,GAAQ,IAAQ,KACrDnC,OAAOC,eACTqC,aAAaF,GACbD,EAAQtC,MAEVG,OAAOI,iBAAiB,+BAA+B,KACrDkC,aAAaF,GACbD,GAAQ,EAAK,IAEfnC,OAAOI,iBAAiB,8BAA8B,KACpDkC,aAAaF,GACbD,GAAQ,EAAM,IAEhBnC,OAAOI,iBAAiB,8BAA8B,KACpDkC,aAAaF,GACbD,EAAQtC,IAAmB,GAC3B,IASAS,GAAQA,EAAOyB,YAAYrC,GAjDnCW,eAAiCX,EAAGuC,GAClC,IAAKjC,OAAOuC,MAAO,OACnB,IAAIC,EAAO,KACX,IAAI,IAAAC,EACF,MAAMC,QAAa1C,OAAOuC,MAAM,eAChCC,EAAO,OAAAE,QAAA,IAAAA,GAAM,QAAND,EAAAC,EAAMC,gBAAA,IAAAF,OAAA,EAANA,EAAgBG,IACzB,CAAE,MAAOrC,GACPP,OAAO6C,KAAKC,IAAA,wBAAAjC,OAA4BN,GAAK,CAAEwC,KAAM,sBACvD,CACId,IAAevC,EAAEsD,KAAK7C,SAAS,UACjCT,EAAEsD,KAAOtD,EAAEsD,KAAKnC,OAAA,SAAAA,OAAgB2B,KAElCxC,OAAOiD,SAASD,KAAOtD,EAAEsD,IAC3B,CAqCIE,CAAkBxD,EAAGuC,EAAW,GAEpC,C","sources":["../node_modules/@adobecom/features/branch-quick-links/branch-quick-links.js"],"sourcesContent":["import { getMetadata, loadStyle, getConfig, createTag } from '../../utils/utils.js';\n\nfunction addLoader(a) {\n  const { base } = getConfig();\n  loadStyle(`${base}/features/branch-quick-links/branch-quick-links.css`);\n  const label = createTag('div', { class: 'pbar-label' });\n  label.textContent = getMetadata('quick-link-loader-text') || '';\n  const tr = createTag('div', { class: 'pbar-value' });\n  tr.style.display = 'block';\n  const progressBar = createTag('div', { class: 'pbar' }, tr);\n  Object.assign(progressBar.style, {\n    width: '100%',\n    height: '10px',\n    borderRadius: '5px',\n    backgroundColor: '#D5D5D5',\n    marginTop: '10px',\n    overflow: 'hidden',\n  });\n  const container = createTag('div', { class: 'pbar-container' }, [label, progressBar]);\n  a.replaceWith(container);\n  return container;\n}\n\nasync function decorateQuickLink(a, hasConsent) {\n  if (!window.alloy) return;\n  let ecid = null;\n  try {\n    const data = await window.alloy('getIdentity');\n    ecid = data?.identity?.ECID;\n  } catch (e) {\n    window.lana.log(`Error fetching ECID: ${e}`, { tags: 'branch-quick-links' });\n  }\n  if (hasConsent && !a.href.includes('ecid')) {\n    a.href = a.href.concat(`?ecid=${ecid}`);\n  }\n  window.location.href = a.href;\n}\n\nexport default function processQuickLink(a) {\n  a.classList.add('quick-link');\n  const getConsentStatus = () => {\n    const cookieGrp = window.adobePrivacy?.activeCookieGroups();\n    return cookieGrp?.includes('C0002') && cookieGrp?.includes('C0004');\n  };\n\n  function waitForConsent() {\n    return new Promise((resolve) => {\n      const fallbackTimeout = setTimeout(() => resolve(false), 30000);\n      if (window.adobePrivacy) {\n        clearTimeout(fallbackTimeout);\n        resolve(getConsentStatus());\n      }\n      window.addEventListener('adobePrivacy:PrivacyConsent', () => {\n        clearTimeout(fallbackTimeout);\n        resolve(true);\n      });\n      window.addEventListener('adobePrivacy:PrivacyReject', () => {\n        clearTimeout(fallbackTimeout);\n        resolve(false);\n      });\n      window.addEventListener('adobePrivacy:PrivacyCustom', () => {\n        clearTimeout(fallbackTimeout);\n        resolve(getConsentStatus());\n      });\n    });\n  }\n\n  a.addEventListener('click', async (e) => {\n    e.preventDefault();\n    let loader;\n    if (getMetadata('quick-link-loader') === 'on') loader = addLoader(a);\n    const hasConsent = await waitForConsent();\n    if (loader) loader.replaceWith(a);\n    decorateQuickLink(a, hasConsent);\n  });\n}\n"],"names":["processQuickLink","a","classList","add","getConsentStatus","_window$adobePrivacy","cookieGrp","window","adobePrivacy","activeCookieGroups","includes","addEventListener","async","loader","e","preventDefault","getMetadata","base","getConfig","loadStyle","concat","label","createTag","class","textContent","tr","style","display","progressBar","Object","assign","width","height","borderRadius","backgroundColor","marginTop","overflow","container","replaceWith","addLoader","hasConsent","Promise","resolve","fallbackTimeout","setTimeout","clearTimeout","alloy","ecid","_data$identity","data","identity","ECID","lana","log","tags","href","location","decorateQuickLink"],"sourceRoot":""}