{"version":3,"file":"static/js/3800.060bd22d.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/features/dynamic-navigation/dynamic-navigation.js","../node_modules/@adobecom/features/dynamic-navigation/status.js"],"sourcesContent":["import { getMetadata } from '../../utils/utils.js';\n\nexport function foundDisableValues() {\n  const dynamicNavDisableValues = getMetadata('dynamic-nav-disable');\n  if (!dynamicNavDisableValues) return false;\n\n  const metadataPairsMap = dynamicNavDisableValues.split(',').map((pair) => pair.split(';'));\n  const foundValues = metadataPairsMap.filter(([metadataKey, metadataContent]) => {\n    const metaTagContent = getMetadata(metadataKey.toLowerCase());\n    return (metaTagContent\n        && metaTagContent.toLowerCase() === metadataContent.toLowerCase());\n  });\n\n  return foundValues.length ? foundValues : false;\n}\n\nfunction dynamicNavGroupMatches(groupMetaData) {\n  const storedGroup = window.sessionStorage.getItem('dynamicNavGroup');\n  if (groupMetaData && storedGroup) {\n    return storedGroup.toLowerCase() === groupMetaData.toLowerCase();\n  }\n  return false;\n}\n\nexport default function dynamicNav(url, key) {\n  const storageSource = 'gnavSource';\n  const storageKey = 'dynamicNavKey';\n  const storageGroup = 'dynamicNavGroup';\n\n  if (foundDisableValues()) return url;\n  const metadataContent = getMetadata('dynamic-nav');\n  const dynamicNavGroup = getMetadata('dynamic-nav-group');\n\n  if (metadataContent === 'reset') {\n    window.sessionStorage.removeItem(storageSource, url);\n    window.sessionStorage.removeItem(storageKey, key);\n    window.sessionStorage.removeItem(storageGroup, dynamicNavGroup);\n    return url;\n  }\n\n  if (metadataContent === 'entry') {\n    window.sessionStorage.setItem(storageSource, url);\n    window.sessionStorage.setItem(storageKey, key);\n    if (dynamicNavGroup) window.sessionStorage.setItem(storageGroup, dynamicNavGroup);\n    return url;\n  }\n\n  if (metadataContent === 'on' && dynamicNavGroup) {\n    if (!dynamicNavGroupMatches(dynamicNavGroup)) return url;\n  }\n\n  if (metadataContent !== 'on' || key !== window.sessionStorage.getItem(storageKey)) return url;\n\n  return window.sessionStorage.getItem(storageSource) || url;\n}\n","import { createTag, getConfig, getMetadata } from '../../utils/utils.js';\nimport { foundDisableValues } from './dynamic-navigation.js';\n\nexport const ACTIVE = 'active';\nexport const ENABLED = 'enabled';\nexport const INACTIVE = 'inactive';\nexport const RESET = 'reset';\nexport const tooltipInfo = {\n  active: 'Displayed in green, this status appears when a user is on an entry page or a page with the Dynamic Nav enabled, indicating that the nav is fully functioning.',\n  enabled: 'Displayed in yellow, this status indicates that the Dynamic Nav is set to \"on,\" but the user has not yet visited an entry page.',\n  inactive: 'Displayed in red, this status indicates that the Dynamic Nav is either not configured or has been disabled.',\n  reset: 'Displayed in grey, this status indicates that this page resets the Dynamic Nav.',\n};\n\nconst getCurrentSource = (status, storageSource, authoredSource) => {\n  if (status === 'on') {\n    return storageSource || authoredSource;\n  }\n  return authoredSource;\n};\n\nconst getStatus = (status, disabled, storageSource) => {\n  if (status === 'entry') return ACTIVE;\n\n  if (status === 'reset') return RESET;\n\n  if (disabled) return INACTIVE;\n\n  if (status === 'on' && storageSource) return ACTIVE;\n\n  if (status === 'on' && !storageSource) return ENABLED;\n\n  return INACTIVE;\n};\n\nconst processDisableValues = (valueStr, elem, foundValues = false) => {\n  if (!valueStr || valueStr.length === 0) return;\n\n  const disableValueList = valueStr.split(',');\n  const table = createTag('table');\n  const flatValues = Array.isArray(foundValues) && foundValues.flat();\n\n  table.innerHTML = `\n      <caption>Disable Values</caption>\n      <thead>\n        <tr>\n          <th>Key</th>\n          <th>Value</th>\n          <th>Match?</th>\n        </tr>\n      </thead>\n      <tbody>\n      </tbody>`;\n\n  const tBody = table.querySelector('tbody');\n\n  disableValueList.forEach((pair) => {\n    const itemRow = createTag('tr');\n    const [key, value] = pair.split(';');\n    const keyElem = createTag('td');\n    const valElem = createTag('td');\n    const matchElem = createTag('td');\n    keyElem.innerText = key;\n    valElem.innerText = value;\n    matchElem.innerText = flatValues && flatValues.includes(value) ? 'yes' : 'no';\n\n    itemRow.append(keyElem, valElem, matchElem);\n    tBody.append(itemRow);\n  });\n\n  elem.append(table);\n};\n\nconst returnPath = (url) => {\n  if (!url.startsWith('https://')) return '';\n  const sourceUrl = new URL(url);\n  return sourceUrl.pathname;\n};\n\nconst createStatusWidget = (dynamicNavKey) => {\n  const storedSource = window.sessionStorage.getItem('gnavSource');\n  const authoredSource = getMetadata('gnav-source') || 'Metadata not found: site gnav source';\n  const dynamicNavSetting = getMetadata('dynamic-nav');\n  const currentSource = getCurrentSource(dynamicNavSetting, storedSource, authoredSource);\n  const dynamicNavDisableValues = getMetadata('dynamic-nav-disable');\n  const foundValues = foundDisableValues();\n  const groupMetaSetting = getMetadata('dynamic-nav-group') || 'Group not set';\n  const storedDyanmicNavGroup = window.sessionStorage.getItem('dynamicNavGroup');\n  const groupsMatch = storedDyanmicNavGroup\n    && groupMetaSetting.toLowerCase() === storedDyanmicNavGroup.toLowerCase();\n  const groupsMatchMessage = groupsMatch ? 'Yes' : 'No';\n  const isDisabled = foundValues.length >= 1 || (!groupsMatch && groupMetaSetting !== 'Group not set');\n  const status = getStatus(dynamicNavSetting, isDisabled, storedSource);\n  const statusWidget = createTag('div', { class: 'dynamic-nav-status' });\n\n  statusWidget.innerHTML = `\n    <span class=\"title\"><span class=\"dns-badge\"></span>Dynamic Nav</span>\n    <section class=\"details hidden\">\n      <span class=\"dns-close\"></span>\n      <div class=\"message additional-info\">\n        <p>Additional Info:\n          <span>${tooltipInfo[status]}</span>\n        </p>\n      </div>\n      <p class=\"status\">Status: <span>${status}</span></p> \n      <p class=\"setting\">Setting: <span>${dynamicNavSetting}</span></p>\n      <p class=\"group\">Group: <span>${groupMetaSetting}</span></p>\n      <p class=\"group-match\">Group matches stored group: <span>${groupsMatchMessage}</span></p>\n      <p class=\"consumer-key\">Consumer key: <span>${dynamicNavKey}</span></p>\n      <div class=\"nav-source-info\">\n        <p>Authored and stored source match: <span>${authoredSource === currentSource}</span></p>\n        <p>Authored Nav Source:\n        <span>${returnPath(authoredSource)}</span></p>\n        <p>Stored Nav Source:\n        <span>${returnPath(currentSource)}</span></p>\n      </div>\n      <div class=\"disable-values\">\n      </div>\n    </section>\n  `;\n\n  processDisableValues(dynamicNavDisableValues, statusWidget.querySelector('.disable-values'), foundValues);\n  statusWidget.classList.add(status);\n\n  statusWidget.addEventListener('click', () => {\n    statusWidget.querySelector('.details').classList.toggle('hidden');\n    statusWidget.querySelector('.dns-badge').classList.toggle('dns-open');\n  });\n\n  return statusWidget;\n};\n\nexport default async function main() {\n  const { dynamicNavKey } = getConfig();\n  const statusWidget = createStatusWidget(dynamicNavKey);\n  const topNav = document.querySelector('.global-navigation');\n  const dnsClose = statusWidget.querySelector('.dns-close');\n\n  dnsClose.addEventListener('click', () => {\n    topNav.removeChild(statusWidget);\n  });\n\n  if (topNav) topNav.appendChild(statusWidget);\n}\n"],"names":["foundDisableValues","dynamicNavDisableValues","getMetadata","foundValues","split","map","pair","filter","_ref","metadataKey","metadataContent","metaTagContent","toLowerCase","length","dynamicNav","url","key","storageSource","storageKey","storageGroup","dynamicNavGroup","window","sessionStorage","removeItem","setItem","groupMetaData","storedGroup","getItem","dynamicNavGroupMatches","ACTIVE","ENABLED","INACTIVE","RESET","tooltipInfo","active","enabled","inactive","reset","returnPath","startsWith","URL","pathname","createStatusWidget","dynamicNavKey","storedSource","authoredSource","dynamicNavSetting","currentSource","getCurrentSource","status","groupMetaSetting","storedDyanmicNavGroup","groupsMatch","groupsMatchMessage","getStatus","disabled","statusWidget","createTag","class","innerHTML","concat","valueStr","elem","arguments","undefined","disableValueList","table","flatValues","Array","isArray","flat","tBody","querySelector","forEach","itemRow","value","keyElem","valElem","matchElem","innerText","includes","append","processDisableValues","classList","add","addEventListener","toggle","main","getConfig","topNav","document","removeChild","appendChild"],"sourceRoot":""}