{"version":3,"file":"static/js/1193.4bd4de46.chunk.js","mappings":"gKAwCe,SAARA,EAAkCC,GACvCA,EAAEC,UAAUC,IAAI,cAChB,IAAMC,EAAmBC,KAAM,IAAAC,EAC7B,IAAMC,EAAmB,QAAnBD,EAAYE,OAAOC,oBAAA,IAAAH,OAAA,EAAPA,EAAqBI,qBACvC,OAAO,OAAAH,QAAA,IAAAA,OAAA,EAAAA,EAAWI,SAAS,YAAY,OAAAJ,QAAA,IAAAA,OAAA,EAAAA,EAAWI,SAAS,SAC7D,EAwBAV,EAAEW,iBAAiB,SAASC,UAE1B,IAAIC,EADJP,EAAEQ,iBAEuC,QAArCC,EAAAA,EAAAA,GAAY,uBAA+BF,EAtEnD,SAAmBb,GACjB,IAAQgB,KAAAb,IAASc,EAAAA,EAAAA,MACjBC,EAAAA,EAAAA,GAAA,GAAAC,OAAahB,EAAI,wDACjB,IAAMiB,GAAQC,EAAAA,EAAAA,GAAU,MAAO,CAAEC,MAAO,eACxCF,EAAMG,aAAcR,EAAAA,EAAAA,GAAY,2BAA6B,GAC7D,IAAMT,GAAKe,EAAAA,EAAAA,GAAU,MAAO,CAAEC,MAAO,eACrChB,EAAGkB,MAAMC,QAAU,QACnB,IAAMZ,GAAcQ,EAAAA,EAAAA,GAAU,MAAO,CAAEC,MAAO,QAAUhB,GACxDoB,OAAOC,OAAOd,EAAYW,MAAO,CAC/BI,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,gBAAiB,UACjBC,UAAW,OACXC,SAAU,WAEZ,IAAMC,GAAYb,EAAAA,EAAAA,GAAU,MAAO,CAAEC,MAAO,kBAAoB,CAACF,EAAOP,IACxE,OAAAb,EAAEmC,YAAYD,GACPA,CACT,CAmD4DE,CAAUpC,IAClE,IAAMkC,QAzBC,IAAIG,SAAS/B,IAClB,IAAMO,EAAkByB,YAAW,IAAMhC,GAAQ,IAAQ,KACrDC,OAAOC,eACT+B,aAAa1B,GACbP,EAAQH,MAEVI,OAAOI,iBAAiB,+BAA+B,KACrD4B,aAAa1B,GACbP,GAAQ,EACV,IACAC,OAAOI,iBAAiB,8BAA8B,KACpD4B,aAAa1B,GACbP,GAAQ,EACV,IACAC,OAAOI,iBAAiB,8BAA8B,KACpD4B,aAAa1B,GACbP,EAAQH,IACV,GACF,IAQIU,GAAQA,EAAOsB,YAAYnC,GAC/B,IAAMwC,EAAYlC,EAAEmC,SAAWnC,EAAEoC,SApDrC9B,eAAiCZ,EAAGG,EAAYiB,GAC9C,IAAId,EAAO,KACX,IAAI,IAAAqC,EAEFrC,EAD0B,QAC1BqC,QADmBpC,OAAOqC,yBAAA,IAAAD,GACb,QADaA,EAC1BA,EAAaE,gBAAA,IAAAF,OAAA,EAAbA,EAAuBG,IACzB,CAAE,MAAOjC,GACPN,OAAOwC,KAAKC,IAAA,wBAAA7B,OAA4BN,GAAK,CAAEoC,KAAM,sBACvD,CACA,GAAI3C,GAAQH,IAAeH,EAAEkD,KAAKxC,SAAS,QAAS,CAClD,IAAMG,EAAS,IAAIsC,IAAInD,EAAEkD,KAAM3C,OAAO6C,SAASC,QAC/CxC,EAAOyC,aAAaC,IAAI,OAAQjD,GAChCN,EAAEkD,KAAOrC,EAAOqC,IAClB,CACI9B,EAAUb,OAAOiD,KAAKxD,EAAEkD,KAAM,UAC7B3C,OAAO6C,SAASF,KAAOlD,EAAEkD,IAChC,CAsCIO,CAAkBzD,EAAGkC,EAAYM,EACnC,GACF,C","sources":["../../milo/libs/features/branch-quick-links/branch-quick-links.js"],"sourcesContent":["import { getMetadata, loadStyle, getConfig, createTag } from '../../utils/utils.js';\n\nfunction addLoader(a) {\n  const { base } = getConfig();\n  loadStyle(`${base}/features/branch-quick-links/branch-quick-links.css`);\n  const label = createTag('div', { class: 'pbar-label' });\n  label.textContent = getMetadata('quick-link-loader-text') || '';\n  const tr = createTag('div', { class: 'pbar-value' });\n  tr.style.display = 'block';\n  const progressBar = createTag('div', { class: 'pbar' }, tr);\n  Object.assign(progressBar.style, {\n    width: '100%',\n    height: '10px',\n    borderRadius: '5px',\n    backgroundColor: '#D5D5D5',\n    marginTop: '10px',\n    overflow: 'hidden',\n  });\n  const container = createTag('div', { class: 'pbar-container' }, [label, progressBar]);\n  a.replaceWith(container);\n  return container;\n}\n\nasync function decorateQuickLink(a, hasConsent, isNewTab) {\n  let ecid = null;\n  try {\n    const data = await window.alloy_getIdentity;\n    ecid = data?.identity?.ECID;\n  } catch (e) {\n    window.lana.log(`Error fetching ECID: ${e}`, { tags: 'branch-quick-links' });\n  }\n  if (ecid && hasConsent && !a.href.includes('ecid')) {\n    const urlObj = new URL(a.href, window.location.origin);\n    urlObj.searchParams.set('ecid', ecid);\n    a.href = urlObj.href;\n  }\n  if (isNewTab) window.open(a.href, '_blank');\n  else window.location.href = a.href;\n}\n\nexport default function processQuickLink(a) {\n  a.classList.add('quick-link');\n  const getConsentStatus = () => {\n    const cookieGrp = window.adobePrivacy?.activeCookieGroups();\n    return cookieGrp?.includes('C0002') && cookieGrp?.includes('C0004');\n  };\n\n  function waitForConsent() {\n    return new Promise((resolve) => {\n      const fallbackTimeout = setTimeout(() => resolve(false), 30000);\n      if (window.adobePrivacy) {\n        clearTimeout(fallbackTimeout);\n        resolve(getConsentStatus());\n      }\n      window.addEventListener('adobePrivacy:PrivacyConsent', () => {\n        clearTimeout(fallbackTimeout);\n        resolve(true);\n      });\n      window.addEventListener('adobePrivacy:PrivacyReject', () => {\n        clearTimeout(fallbackTimeout);\n        resolve(false);\n      });\n      window.addEventListener('adobePrivacy:PrivacyCustom', () => {\n        clearTimeout(fallbackTimeout);\n        resolve(getConsentStatus());\n      });\n    });\n  }\n\n  a.addEventListener('click', async (e) => {\n    e.preventDefault();\n    let loader;\n    if (getMetadata('quick-link-loader') === 'on') loader = addLoader(a);\n    const hasConsent = await waitForConsent();\n    if (loader) loader.replaceWith(a);\n    const isNewTab = (e.metaKey || e.ctrlKey);\n    decorateQuickLink(a, hasConsent, isNewTab);\n  });\n}\n"],"names":["f","i","classList","add","n","getConsentStatus","_window$adobePrivacy","e","window","adobePrivacy","activeCookieGroups","includes","addEventListener","async","t","preventDefault","r","base","s","d","concat","a","o","class","textContent","style","display","Object","assign","width","height","borderRadius","backgroundColor","marginTop","overflow","c","replaceWith","u","Promise","setTimeout","clearTimeout","l","metaKey","ctrlKey","_await$window$alloy_g","alloy_getIdentity","identity","ECID","lana","log","tags","href","URL","location","origin","searchParams","set","open","w"],"sourceRoot":""}