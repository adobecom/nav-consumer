{"version":3,"file":"static/js/3203.26250d1c.chunk.js","mappings":"iOAEMA,EAAsB,CAAC,EAC7BC,OAAOC,IAAM,CAAC,EAEd,IAMMC,EAAoBC,UAAkE,IAA3D,OAAEC,EAAA,MAAQC,EAAA,mBAAOC,EAAA,gBAAoBC,GAAgBC,EACpF,MAAMC,EAAOF,GAPaG,EAACN,EAAQC,KACnC,MAAMI,EAAA,GAAAE,OAAUP,EAAOQ,OAAOC,YAAW,sBACnCC,EAAkB,YAAVT,GAAwC,kBAAVA,GAAsBA,EAAMU,OAAA,UAAAJ,OAAmBN,GAAU,GACrG,MAAO,GAAPM,OAAUF,GAAIE,OAAGG,EAAK,EAIUJ,CAAoBN,EAAQC,GAe5D,OAbAN,EAAoBU,GAAQV,EAAoBU,IAAS,IAAIO,SAAQb,UACnE,MAAMc,QAAaX,SAA4BY,EAAAA,EAAAA,aAC7C,CAAEC,SAAUV,EAAMW,gBAAgB,IAClCC,OAAM,KAAM,CAAG,KACXC,EAAOL,EAAKM,SAAWN,EAAKK,OAAS,CAAEE,KAAM,IACnD,GAAyB,IAArBF,EAAKE,KAAKT,OAA6B,YAAbU,EAAQ,CAAC,GACvC,MAAMC,EAAe,CAAC,EACtBJ,EAAKE,KAAKG,SAASC,IACjB5B,OAAOC,IAAI2B,EAAKC,KAAOD,EAAKE,MAC5BJ,EAAaE,EAAKC,KAAOD,EAAKE,KAAA,IAEhCL,EAAQC,EAAa,IAEhB3B,EAAoBU,EAAK,EAOlCN,eAAe4B,EAAeF,EAAKzB,EAAQC,GAAO,IAAA2B,EAAAC,EAChD,IAAIC,GAAiB,EACrB,MAAMC,EAAgB,QAChBC,GAAiBC,EAAAA,EAAAA,aAAY,6BAA+B,MAE5DC,EAAwBA,KAC5B,MAAMC,EAAqBnC,EAAOQ,OAAOC,YACnC2B,EAAepC,EAAOQ,OAAO6B,OAEnC,OAAKD,EAAazB,OAIdwB,EAAmBG,SAASF,GACvBD,EAAmBI,QAAQH,EAAc,IAG3CD,EAAmBI,QAAA,GAAAhC,OAAW6B,EAAY,KAAK,KARrBD,CAQyB,EAGtDK,EAAyBzC,UAC7B,MAAM0C,EAAgB,CACpBjC,OAAQ,CACNkC,KAAMX,EACNtB,YAAayB,MAIXS,QAA4B7C,EAAkB,CAAEE,OAAQyC,EAAexC,UAC1EgB,OAAM,KAAM,CAAG,KAElB,OADAa,GAAiB,EACVa,CAAA,EAGT,GAAW,QAAXf,EAAI5B,EAAOsB,oBAAA,IAAAM,GAAPA,EAAsBH,GAAM,OAAOzB,EAAOsB,aAAaG,GAC3D,IAAIH,EAQJ,GALEA,EADqB,OAAnBU,QACmBQ,UAEA1C,EAAkB,CAAEE,SAAQC,UAGhB,kBAAxB,QAAP4B,EAAOP,SAAA,IAAAO,OAAA,EAAAA,EAAeJ,IAAmB,OAAOH,EAAaG,GAEjE,IAAKK,GAAkB9B,EAAOQ,OAAOkC,OAASX,EAAe,CAC3D,MAAMY,QAA4BH,IAClC,GAAI,OAAAG,QAAA,IAAAA,GAAAA,EAAsBlB,GAAM,OAAOkB,EAAoBlB,EAC7D,CAEA,OAtDF,SAAkBA,GAChB,OAAOA,EAAImB,WAAW,IAAK,IAC7B,CAoDSC,CAASpB,EAClB,CAEA,eAAsBqB,EAAWrB,EAAKzB,GAA2B,IAAnBC,EAAA8C,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAQ,UACpD,GAAmB,kBAARtB,IAAqBA,EAAId,OAAQ,MAAO,GAGnD,aADoBgB,EAAeF,EAAKzB,EAAQC,EAElD,CAEA,eAAsBgD,EAAgBC,EAAMlD,GAA2B,IAAnBC,EAAA8C,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAQ,UAC1D,IAAKI,MAAMC,QAAQF,KAAUA,EAAKvC,OAAQ,MAAO,GAEjD,MAAM0C,EAAa,GACnBH,EAAK3B,SAASE,IACZ4B,EAAWC,KAAK3B,EAAeF,EAAKzB,EAAQC,GAAO,IAIrD,aAD2BW,QAAQ2C,IAAIF,EAEzC,CAEA,eAAsBG,EACpBC,EACAzD,GAGA,IAFA0D,EAAAX,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAQ,+BACR9C,EAAA8C,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAQ,UAER,GAAoB,kBAATU,IAAsBA,EAAK9C,OAAQ,MAAO,GAErD,MAAMgD,EAAU,IAAIF,EAAKG,SAAS,IAAIC,OAAOH,KAC7C,IAAKC,EAAQhD,OACX,OAAO8C,EAET,MAAMP,EAAOC,MAAMW,KAAKH,GAAUI,GAAUA,EAAM,IAAMA,EAAM,KACxDzC,QAAqB2B,EAAgBC,EAAMlD,EAAQC,GAEzD,IAAI+D,EAAI,EAEJC,EAAYR,EAAKb,WAAWc,GAAO,IAAMpC,EAAa0C,OAE1D,OADAC,EAAYA,EAAU1B,QAAQ,UAAW,QAClC0B,CACT,CAEA,eAAsBC,EAAAC,GAInB,IAJ2C,gBAC5ChE,EAAA,mBACAD,EAAA,MACAkE,GACFD,EACE,IAAKC,EAAMzD,OAAQ,OACnB,MAAMX,GAASqE,EAAAA,EAAAA,mBACTvE,EAAkB,CAAEK,kBAAiBH,SAAQE,uBACnD,MAAMoE,EAAeF,EAAMG,KAAIxE,UAC7B,GAAIyE,EAAOC,WAAaC,KAAKC,UAC3BH,EAAOI,gBAAkBpB,EAAYgB,EAAOI,UAAW5E,QAClD,GAAIwE,EAAOC,WAAaC,KAAKG,aAAc,CAChD,MAAMC,EAAe,IAAIN,EAAOO,YAAYR,KAAIxE,UAC9C,MAAMiF,QAAgBxB,EAAYyB,EAAKvD,MAAO1B,GAC9C,MAAO,CAAEkF,KAAMD,EAAKC,KAAMxD,MAAOsD,EAAS,WAEtBpE,QAAQ2C,IAAIuB,IAC1BvD,SAAQ4D,IAAqB,IAApB,KAAED,EAAA,MAAMxD,GAAMyD,EAC7BX,EAAOY,aAAaF,EAAMxD,EAAM,GAEpC,WAEId,QAAQ2C,IAAIe,EACpB,C","sources":["../node_modules/@adobecom/features/placeholders.js"],"sourcesContent":["import { customFetch, getConfig, getMetadata } from '../utils/utils.js';\n\nconst fetchedPlaceholders = {};\nwindow.mph = {};\n\nconst getPlaceholdersPath = (config, sheet) => {\n  const path = `${config.locale.contentRoot}/placeholders.json`;\n  const query = sheet !== 'default' && typeof sheet === 'string' && sheet.length ? `?sheet=${sheet}` : '';\n  return `${path}${query}`;\n};\n\nconst fetchPlaceholders = async ({ config, sheet, placeholderRequest, placeholderPath }) => {\n  const path = placeholderPath || getPlaceholdersPath(config, sheet);\n  // eslint-disable-next-line no-async-promise-executor\n  fetchedPlaceholders[path] = fetchedPlaceholders[path] || new Promise(async (resolve) => {\n    const resp = await placeholderRequest || await customFetch(\n      { resource: path, withCacheRules: true },\n    ).catch(() => ({}));\n    const json = resp.ok ? await resp.json() : { data: [] };\n    if (json.data.length === 0) { resolve({}); return; }\n    const placeholders = {};\n    json.data.forEach((item) => {\n      window.mph[item.key] = item.value;\n      placeholders[item.key] = item.value;\n    });\n    resolve(placeholders);\n  });\n  return fetchedPlaceholders[path];\n};\n\nfunction keyToStr(key) {\n  return key.replaceAll('-', ' ');\n}\n\nasync function getPlaceholder(key, config, sheet) {\n  let defaultFetched = false;\n  const defaultLocale = 'en-US';\n  const geoLocDisabled = getMetadata('disable-geo-placeholders') || 'off';\n\n  const getDefaultContentRoot = () => {\n    const defaultContentRoot = config.locale.contentRoot;\n    const localePrefix = config.locale.prefix;\n\n    if (!localePrefix.length) return defaultContentRoot;\n\n    // Certain locale prefixes are common beginnings of words, such as /es\n    // This could also be part of a page path, such as '/esign'\n    if (defaultContentRoot.endsWith(localePrefix)) {\n      return defaultContentRoot.replace(localePrefix, '');\n    }\n\n    return defaultContentRoot.replace(`${localePrefix}/`, '/');\n  };\n\n  const getDefaultPlaceholders = async () => {\n    const defaultConfig = {\n      locale: {\n        ietf: defaultLocale,\n        contentRoot: getDefaultContentRoot(),\n      },\n    };\n\n    const defaultPlaceholders = await fetchPlaceholders({ config: defaultConfig, sheet })\n      .catch(() => ({}));\n    defaultFetched = true;\n    return defaultPlaceholders;\n  };\n\n  if (config.placeholders?.[key]) return config.placeholders[key];\n  let placeholders;\n\n  if (geoLocDisabled === 'on') {\n    placeholders = await getDefaultPlaceholders();\n  } else {\n    placeholders = await fetchPlaceholders({ config, sheet });\n  }\n\n  if (typeof placeholders?.[key] === 'string') return placeholders[key];\n\n  if (!defaultFetched && config.locale.ietf !== defaultLocale) {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    if (defaultPlaceholders?.[key]) return defaultPlaceholders[key];\n  }\n\n  return keyToStr(key);\n}\n\nexport async function replaceKey(key, config, sheet = 'default') {\n  if (typeof key !== 'string' || !key.length) return '';\n\n  const label = await getPlaceholder(key, config, sheet);\n  return label;\n}\n\nexport async function replaceKeyArray(keys, config, sheet = 'default') {\n  if (!Array.isArray(keys) || !keys.length) return [];\n\n  const promiseArr = [];\n  keys.forEach((key) => {\n    promiseArr.push(getPlaceholder(key, config, sheet));\n  });\n\n  const placeholders = await Promise.all(promiseArr);\n  return placeholders;\n}\n\nexport async function replaceText(\n  text,\n  config,\n  regex = /{{(.*?)}}|%7B%7B(.*?)%7D%7D/g,\n  sheet = 'default',\n) {\n  if (typeof text !== 'string' || !text.length) return '';\n\n  const matches = [...text.matchAll(new RegExp(regex))];\n  if (!matches.length) {\n    return text;\n  }\n  const keys = Array.from(matches, (match) => match[1] || match[2]);\n  const placeholders = await replaceKeyArray(keys, config, sheet);\n  // The .shift method is very slow, thus using normal iterator\n  let i = 0;\n  // eslint-disable-next-line no-plusplus\n  let finalText = text.replaceAll(regex, () => placeholders[i++]);\n  finalText = finalText.replace(/&nbsp;/g, '\\u00A0');\n  return finalText;\n}\n\nexport async function decoratePlaceholderArea({\n  placeholderPath,\n  placeholderRequest,\n  nodes,\n}) {\n  if (!nodes.length) return;\n  const config = getConfig();\n  await fetchPlaceholders({ placeholderPath, config, placeholderRequest });\n  const replaceNodes = nodes.map(async (nodeEl) => {\n    if (nodeEl.nodeType === Node.TEXT_NODE) {\n      nodeEl.nodeValue = await replaceText(nodeEl.nodeValue, config);\n    } else if (nodeEl.nodeType === Node.ELEMENT_NODE) {\n      const attrPromises = [...nodeEl.attributes].map(async (attr) => {\n        const attrVal = await replaceText(attr.value, config);\n        return { name: attr.name, value: attrVal };\n      });\n      const results = await Promise.all(attrPromises);\n      results.forEach(({ name, value }) => {\n        nodeEl.setAttribute(name, value);\n      });\n    }\n  });\n  await Promise.all(replaceNodes);\n}\n"],"names":["fetchedPlaceholders","window","mph","fetchPlaceholders","async","config","sheet","placeholderRequest","placeholderPath","_ref","path","getPlaceholdersPath","concat","locale","contentRoot","query","length","Promise","resp","customFetch","resource","withCacheRules","catch","json","ok","data","resolve","placeholders","forEach","item","key","value","getPlaceholder","_config$placeholders","_placeholders","defaultFetched","defaultLocale","geoLocDisabled","getMetadata","getDefaultContentRoot","defaultContentRoot","localePrefix","prefix","endsWith","replace","getDefaultPlaceholders","defaultConfig","ietf","defaultPlaceholders","replaceAll","keyToStr","replaceKey","arguments","undefined","replaceKeyArray","keys","Array","isArray","promiseArr","push","all","replaceText","text","regex","matches","matchAll","RegExp","from","match","i","finalText","decoratePlaceholderArea","_ref2","nodes","getConfig","replaceNodes","map","nodeEl","nodeType","Node","TEXT_NODE","nodeValue","ELEMENT_NODE","attrPromises","attributes","attrVal","attr","name","_ref3","setAttribute"],"sourceRoot":""}