{"version":3,"file":"static/js/2370.af7221e5.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/blocks/fragment/fragment.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\nimport { createTag, getConfig, loadArea, localizeLink, customFetch } from '../../utils/utils.js';\n\nconst fragMap = {};\n\nconst removeHash = (url) => {\n  const urlNoHash = url.split('#')[0];\n  return url.includes('#_dnt') ? `${urlNoHash}#_dnt` : urlNoHash;\n};\n\nconst isCircularRef = (href) => [...Object.values(fragMap)]\n  .some((tree) => {\n    const node = tree.find(href);\n    return node?.isRecursive;\n  });\n\nconst updateFragMap = (fragment, a, href) => {\n  const fragLinks = [...fragment.querySelectorAll('a')]\n    .filter((link) => localizeLink(link.href).includes('/fragments/'));\n  if (!fragLinks.length) return;\n\n  if (document.body.contains(a) && !a.parentElement?.closest('.fragment')) {\n    // eslint-disable-next-line no-use-before-define\n    fragMap[href] = new Tree(href);\n    fragLinks.forEach((link) => fragMap[href].insert(href, localizeLink(removeHash(link.href))));\n  } else {\n    Object.values(fragMap).forEach((tree) => {\n      const hrefNode = tree.find(href);\n      if (!hrefNode) return;\n\n      fragLinks.forEach((link) => {\n        const localizedHref = localizeLink(removeHash(link.href));\n        const parentNodeSameHref = hrefNode.findParent(localizedHref);\n        if (parentNodeSameHref) {\n          parentNodeSameHref.isRecursive = true;\n        } else {\n          hrefNode.addChild(localizedHref);\n        }\n      });\n    });\n  }\n};\n\nconst insertInlineFrag = (sections, a, relHref) => {\n  // Inline fragments only support one section, other sections are ignored\n  const fragChildren = [...sections[0].children];\n  if (a.parentElement.nodeName === 'DIV' && !a.parentElement.attributes.length) {\n    a.parentElement.replaceWith(...fragChildren);\n  } else {\n    a.replaceWith(...fragChildren);\n  }\n  fragChildren.forEach((child) => child.setAttribute('data-path', relHref));\n};\n\nfunction replaceDotMedia(path, doc) {\n  const resetAttributeBase = (tag, attr) => {\n    doc.querySelectorAll(`${tag}[${attr}^=\"./media_\"]`).forEach((el) => {\n      el[attr] = new URL(el.getAttribute(attr), new URL(path, window.location)).href;\n    });\n  };\n  resetAttributeBase('img', 'src');\n  resetAttributeBase('source', 'srcset');\n}\n\nexport default async function init(a) {\n  const { decorateArea, mep, placeholders } = getConfig();\n  let relHref = localizeLink(a.href);\n  let inline = false;\n\n  if (a.parentElement?.nodeName === 'P') {\n    const children = a.parentElement.childNodes;\n    const div = createTag('div');\n    for (const attr of a.parentElement.attributes) div.setAttribute(attr.name, attr.value);\n    a.parentElement.replaceWith(div);\n    div.append(...children);\n  }\n\n  if (a.href.includes('#_inline')) {\n    inline = true;\n    a.href = a.href.replace('#_inline', '');\n    relHref = relHref.replace('#_inline', '');\n  }\n\n  const path = new URL(a.href).pathname;\n  if (mep?.fragments?.[path]) {\n    const { handleFragmentCommand } = await import('../../features/personalization/personalization.js');\n    relHref = handleFragmentCommand(mep?.fragments[path], a);\n    if (!relHref) return;\n  }\n\n  if (isCircularRef(relHref)) {\n    window.lana?.log(`ERROR: Fragment Circular Reference loading ${a.href}`);\n    return;\n  }\n\n  let resourcePath = a.href;\n  if (a.href.includes('/federal/')) {\n    const { getFederatedUrl } = await import('../../utils/utils.js');\n    resourcePath = getFederatedUrl(a.href);\n  }\n  const resp = await customFetch({ resource: `${resourcePath}.plain.html`, withCacheRules: true })\n    .catch(() => ({}));\n\n  if (!resp?.ok) {\n    window.lana?.log(`Could not get fragment: ${resourcePath}.plain.html`);\n    return;\n  }\n\n  const html = await resp.text();\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  replaceDotMedia(a.href, doc);\n  if (decorateArea) decorateArea(doc, { fragmentLink: a });\n\n  const sections = doc.querySelectorAll('body > div');\n\n  if (!sections.length) {\n    window.lana?.log(`Could not make fragment: ${resourcePath}.plain.html`);\n    return;\n  }\n\n  const fragment = createTag('div', { class: 'fragment', 'data-path': relHref });\n  fragment.append(...sections);\n\n  updateFragMap(fragment, a, relHref);\n  if (a.dataset.manifestId\n    || a.dataset.adobeTargetTestid\n    || mep?.commands?.length\n    || placeholders) {\n    const { updateFragDataProps, handleCommands, replacePlaceholders } = await import('../../features/personalization/personalization.js');\n    if (a.dataset.manifestId || a.dataset.adobeTargetTestid) {\n      updateFragDataProps(a, inline, sections, fragment);\n    }\n    if (mep?.commands?.length) handleCommands(mep?.commands, fragment, false, true);\n    if (placeholders) fragment.innerHTML = replacePlaceholders(fragment.innerHTML, placeholders);\n  }\n  if (inline) {\n    insertInlineFrag(sections, a, relHref, mep);\n  } else {\n    a.parentElement.replaceChild(fragment, a);\n    await loadArea(fragment);\n  }\n}\n\nclass Node {\n  constructor(key, value = key, parent = null) {\n    this.key = key;\n    this.value = value;\n    this.parent = parent;\n    this.children = [];\n    this.isRecursive = false;\n  }\n\n  addChild(key, value = key) {\n    const alreadyHasChild = this.children.some((n) => n.key === key);\n    if (!alreadyHasChild) {\n      this.children.push(new Node(key, value, this));\n    }\n  }\n\n  findParent(key) {\n    if (this.parent?.key === key) return this.parent;\n    return this.parent?.findParent(key);\n  }\n}\n\nexport class Tree {\n  constructor(key, value = key) {\n    this.root = new Node(key, value);\n  }\n\n  * traverse(node = this.root) {\n    yield node;\n    if (node.children.length) {\n      for (const child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  insert(parentNodeKey, key, value = key) {\n    for (const node of this.traverse()) {\n      if (node.key === parentNodeKey) {\n        node.children.push(new Node(key, value, node));\n        return true;\n      }\n    }\n    return false;\n  }\n\n  remove(key) {\n    for (const node of this.traverse()) {\n      const filtered = node.children.filter((c) => c.key !== key);\n      if (filtered.length !== node.children.length) {\n        node.children = filtered;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  find(key) {\n    for (const node of this.traverse()) {\n      if (node.key === key) return node;\n    }\n    return undefined;\n  }\n}\n"],"names":["fragMap","removeHash","url","urlNoHash","split","includes","concat","isCircularRef","href","Object","values","some","tree","node","find","isRecursive","updateFragMap","fragment","a","_a$parentElement","fragLinks","querySelectorAll","filter","link","localizeLink","length","document","body","contains","parentElement","closest","forEach","hrefNode","localizedHref","parentNodeSameHref","findParent","addChild","Tree","insert","insertInlineFrag","sections","relHref","fragChildren","children","nodeName","attributes","replaceWith","child","setAttribute","init","_a$parentElement2","_mep$fragments","_mep$commands","decorateArea","mep","placeholders","getConfig","inline","childNodes","div","createTag","attr","name","value","append","replace","path","URL","pathname","fragments","handleFragmentCommand","_window$lana","window","lana","log","resourcePath","getFederatedUrl","resp","customFetch","resource","withCacheRules","catch","_window$lana2","ok","html","text","doc","DOMParser","parseFromString","resetAttributeBase","tag","el","getAttribute","location","replaceDotMedia","fragmentLink","_window$lana3","class","dataset","manifestId","adobeTargetTestid","commands","_mep$commands2","updateFragDataProps","handleCommands","replacePlaceholders","innerHTML","replaceChild","loadArea","Node","_Node","constructor","key","arguments","undefined","parent","this","n","push","_this$parent","_this$parent2","root","traverse","_this","parentNodeKey","remove","filtered","c"],"sourceRoot":""}