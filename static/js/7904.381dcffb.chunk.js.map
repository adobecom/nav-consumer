{"version":3,"file":"static/js/7904.381dcffb.chunk.js","mappings":"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","sources":["../node_modules/@adobecom/standalone-feds/dist|lazy|/^.*//deps//budoux/-index/-ja/.min/.js$/|referencedExports: [[\"loadDefaultJapaneseParser\"]]|groupOptions: {}|strict namespace object","../node_modules/@adobecom/standalone-feds/dist|lazy|/^.*//deps//bw2/.min/.js$/|groupOptions: {}|strict namespace object","../node_modules/@adobecom/features/japanese-word-wrap.js"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8703;\nmodule.exports = webpackEmptyAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 5397;\nmodule.exports = webpackEmptyAsyncContext;","/* eslint-disable no-console */\nimport { getMetadata } from '../utils/utils.js';\n\nconst hasTextNode = (element) => [...element.childNodes]\n  .some(({ nodeType, textContent }) => nodeType === Node.TEXT_NODE && textContent.trim() !== '');\n\nfunction findTextElements(element = document.body) {\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'header' || tagName === 'footer'\n    || element.classList.contains('jpwordwrap-disabled')\n  ) {\n    return [];\n  }\n\n  return Array.from(element.children).reduce((result, child) => (\n    hasTextNode(child)\n      ? [...result, child]\n      : [...result, ...findTextElements(child)]\n  ), []);\n}\n\n/**\n * Update the model to control line breaks occurring for the specified word.\n */\nfunction updateParserModel(parser, pattern, score, markerSymbol = '#') {\n  const markerPos = pattern.indexOf(markerSymbol);\n  if (markerPos === -1) {\n    console.warn('No marker symbol found in the line break pattern string');\n    return;\n  }\n\n  if (markerPos !== pattern.lastIndexOf('#')) {\n    console.warn('Two or more marker symbols cannot be specified. Only the first marker is applied');\n  }\n\n  const former = pattern.slice(Math.max(markerPos - 3, 0), markerPos);\n  const latter = pattern.slice(markerPos + 1, Math.min(markerPos + 4, pattern.length));\n\n  if (former.length < 2 || latter.length < 2) {\n    console.warn('At least two characters must be specified before and after the marker symbol');\n    return;\n  }\n\n  if (former.length === 3) {\n    parser.model.set(`TW1:${former}`, score);\n  } else if (former.length === 2) {\n    parser.model.set(`BW1:${former}`, score);\n  }\n\n  if (latter.length === 3) {\n    parser.model.set(`TW4:${latter}`, score);\n  } else if (latter.length === 2) {\n    parser.model.set(`BW3:${latter}`, score);\n  }\n}\n\nfunction hasFlexOrGrid(element) {\n  const elStyles = getComputedStyle(element);\n\n  return (elStyles.display === 'flex' || elStyles.display === 'grid');\n}\n\nfunction isFirefox() {\n  return navigator.userAgent.includes('Firefox');\n}\n\n/**\n * Check if a word wrap has been applied to an element.\n */\nexport function isWordWrapApplied(element) {\n  return !!element.querySelector('wbr');\n}\n\n/**\n * Check if a balanced word wrap has been applied to an element.\n */\nexport function isBalancedWordWrapApplied(element) {\n  return !!element.querySelector('wbr[class^=jpn-balanced-wbr]');\n}\n\n/**\n * Apply smart line-breaking algorithm depending on the given options.\n */\nexport async function applyJapaneseLineBreaks(config, options = {}) {\n  const { miloLibs, codeRoot } = config;\n  const {\n    scopeArea = document,\n    budouxThres = 2000,\n    bwEnabled = false,\n    budouxExcludeSelector = null,\n    bwExcludeSelector = 'p',\n    lineBreakOkPatterns = [],\n    lineBreakNgPatterns = [],\n  } = options;\n  const base = miloLibs || codeRoot;\n\n  // The thresould value to control word break granularity for long semantic blocks.\n  const { loadDefaultJapaneseParser } = await import(`${base}/deps/budoux-index-ja.min.js`);\n  const parser = loadDefaultJapaneseParser();\n\n  // Find elements that contains a text node directly under its child node.\n  const textElements = findTextElements(\n    scopeArea instanceof Document ? scopeArea.body : scopeArea,\n  );\n  const budouxExcludeElements = new Set();\n  const bwExcludeElements = new Set();\n\n  // Find BudouX disabled elements\n  if (budouxExcludeSelector) {\n    scopeArea.querySelectorAll(budouxExcludeSelector).forEach((el) => {\n      budouxExcludeElements.add(el);\n    });\n  }\n\n  // Find Blanced Word Wrap disabled elements\n  if (bwEnabled && bwExcludeSelector) {\n    scopeArea.querySelectorAll(bwExcludeSelector).forEach((el) => {\n      bwExcludeElements.add(el);\n    });\n  }\n\n  // Update model based on given patterns\n  const SCORE = Number.MAX_VALUE;\n  lineBreakOkPatterns.forEach((p) => {\n    updateParserModel(parser, p, SCORE);\n  });\n  lineBreakNgPatterns.forEach((p) => {\n    updateParserModel(parser, p, -SCORE);\n  });\n\n  // Apply budoux to target selector\n  textElements.forEach((el) => {\n    if (\n      budouxExcludeElements.has(el)\n      || isWordWrapApplied(el)\n      || (isFirefox() && hasFlexOrGrid(el))\n    ) return;\n    parser.applyElement(el, { threshold: budouxThres });\n  });\n\n  if (bwEnabled) {\n    const BalancedWordWrapper = (await import(`${base}/deps/bw2.min.js`)).default;\n    const bw2 = new BalancedWordWrapper();\n    // Apply balanced word wrap to target selector\n    textElements.forEach((el) => {\n      if (\n        bwExcludeElements.has(el)\n        || isBalancedWordWrapApplied(el)\n        || (isFirefox() && hasFlexOrGrid(el))\n      ) return;\n      bw2.applyElement(el);\n    });\n  }\n}\n\n/**\n * Apply smart line-breaking algorithm by inserting <wbr> between semantic blocks.\n * This allows browsers to break japanese sentences correctly.\n */\nexport default async function controlJapaneseLineBreaks(config, scopeArea = document) {\n  const disabled = getMetadata('jpwordwrap:disabled') === 'true' || false;\n  const budouxThres = Number(getMetadata('jpwordwrap:budoux-thres')) || 2000;\n  const budouxExcludeSelector = getMetadata('jpwordwrap:budoux-exclude-selector');\n  const bwEnabled = getMetadata('jpwordwrap:bw-enabled') === 'true' || false;\n  const bwExcludeSelector = getMetadata('jpwordwrap:bw-exclude-selector') || 'p';\n  const lineBreakOkPatterns = (getMetadata('jpwordwrap:line-break-ok') || '').split(',');\n  const lineBreakNgPatterns = (getMetadata('jpwordwrap:line-break-ng') || '').split(',');\n\n  if (disabled) return;\n\n  await applyJapaneseLineBreaks(config, {\n    scopeArea,\n    budouxThres,\n    budouxExcludeSelector,\n    bwEnabled,\n    bwExcludeSelector,\n    lineBreakOkPatterns,\n    lineBreakNgPatterns,\n  });\n}\n"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","hasTextNode","element","childNodes","some","_ref","nodeType","textContent","Node","TEXT_NODE","trim","findTextElements","arguments","length","undefined","document","body","tagName","toLowerCase","classList","contains","Array","from","children","reduce","result","child","updateParserModel","parser","pattern","score","markerSymbol","markerPos","indexOf","console","warn","lastIndexOf","former","slice","Math","max","latter","min","model","set","concat","hasFlexOrGrid","elStyles","getComputedStyle","display","isFirefox","navigator","userAgent","includes","isWordWrapApplied","querySelector","isBalancedWordWrapApplied","applyJapaneseLineBreaks","config","options","miloLibs","codeRoot","scopeArea","budouxThres","bwEnabled","budouxExcludeSelector","bwExcludeSelector","lineBreakOkPatterns","lineBreakNgPatterns","base","loadDefaultJapaneseParser","textElements","Document","budouxExcludeElements","Set","bwExcludeElements","querySelectorAll","forEach","el","add","SCORE","Number","MAX_VALUE","p","has","applyElement","threshold","bw2","BalancedWordWrapper","default","controlJapaneseLineBreaks","disabled","getMetadata","split"],"sourceRoot":""}