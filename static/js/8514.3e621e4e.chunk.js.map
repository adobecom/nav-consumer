{"version":3,"file":"static/js/8514.3e621e4e.chunk.js","mappings":"kJACA,eAAOA,EAAsCC,EAAWC,GACtD,MAAM,KAAEC,EAAA,SAAMC,EAAA,OAAUC,EAAA,SAAQC,EAAA,OAAUC,GAAWL,GAC/C,UAAEM,EAAA,UAAWC,EAAA,WAAWC,SAAqB,+BAYnD,IAAKC,SAASC,cAAcR,GAAW,CACrC,MAAMS,EAAQJ,EAAUL,EAAU,CAAEU,MAAOX,IAC3CQ,SAASI,KAAKb,EAAYc,YAAYH,EACxC,CAEA,GAA6B,WAAzBX,EAAYE,SAAuB,CAflBa,MACnB,MAAMC,EAAUP,SAASC,cAAcR,GACxB,cAAXC,GACFa,EAAQC,UAAUC,IAAI,oBAEpBd,GACFY,EAAQC,UAAUC,IAAI,kBACxB,EASAH,GACiB,CACf,CAAEI,IAAK,iBAAkBlB,KAAM,iBAC/B,CAAEkB,IAAK,WAAYlB,KAAM,wBAElBmB,SAASC,IAChB,MAAM,IAAEF,GAAQE,EAChB,GAAIrB,EAAYmB,GAAM,CACpB,MAAMG,EAAUf,EAAU,OAAQ,CAChCN,KAAMoB,EAAIpB,KACVsB,QAASvB,EAAYmB,KAEvBV,SAASe,KAAKC,OAAOH,EACvB,IAEJ,CAGA,SADMvB,EAAUU,SAASC,cAAcR,IACV,WAAzBF,EAAYE,SAAuB,CACrC,MAAM,YAAEwB,SAAsB,+BAC9BC,YAAW,KACTD,EAAYpB,EAAWE,EAAW,GACjCR,EAAY4B,MACjB,CAGA,GAAI,OAAAvB,QAAA,IAAAA,GAAAA,EAAQwB,GAAI,CACd,MAAMC,EAAqBC,KAAa,OAAAA,QAAA,IAAAA,IAAAA,EAAQC,qCAE1CC,EAAcF,IAAA,IAAAG,EAAA,OAAWJ,EAAkBC,IAAkE,YAAvD,OAAAA,QAAA,IAAAA,GAAoC,QAApCG,EAAAH,EAAQI,qCAA4B,IAAAD,OAAA,EAApCA,EAAuCE,YAAgB,EAE7GC,EAAYC,IAAU,IAAAC,EAAAC,EAAAC,EAC1B,MAAMV,EAASW,OAAOC,+BAGtB,IAAKb,EAAkBC,GAErB,YADAW,OAAOE,SAASC,OAAO,2BAIzB,MAAMC,EAAO,OAAAf,QAAA,IAAAA,OAAA,EAAAA,EAAQgB,oBACrB,GAAoB,oBAATD,GAAuBb,EAAWF,GAC3C,OAGF,MAAMiB,EAAa,OAAAV,QAAA,IAAAA,GAAc,QAAdC,EAAAD,EAAOW,OAAOC,eAAA,IAAAX,OAAA,EAAdA,EAAuBY,cACpCC,EAA4B,QAAfJ,EAAoC,QAArBR,EAAQF,EAAMW,OAAOI,WAAA,IAAAb,OAAA,EAAbA,EAAkBc,OAAsB,QAAjBb,EAAIH,EAAMW,OAAOM,iBAAA,IAAAd,OAAA,EAAbA,EAAwBa,OAE7FR,EAAKR,EAAQ,CAAEU,aAAYI,cAAe,CAAC,EAAE,EAG1BI,MACnB/C,SAASgD,iBAAiB,SAAUnB,IAC7BA,EAAMW,OAAOS,QAAQ,iCAC1BpB,EAAMqB,iBACNtB,EAASC,GAAM,GACf,EAIJkB,EACF,CACF,C","sources":["../node_modules/@adobecom/standalone-feds/bootstrapper.js"],"sourcesContent":["/* eslint import/no-relative-packages: 0 */\nexport default async function bootstrapBlock(initBlock, blockConfig) {\n  const { name, targetEl, layout, noBorder, jarvis } = blockConfig;\n  const { getConfig, createTag, loadScript } = await import('../utils/utils.js');\n\n  const setNavLayout = () => {\n    const element = document.querySelector(targetEl);\n    if (layout === 'fullWidth') {\n      element.classList.add('feds--full-width');\n    }\n    if (noBorder) {\n      element.classList.add('feds--no-border');\n    }\n  };\n\n  if (!document.querySelector(targetEl)) {\n    const block = createTag(targetEl, { class: name });\n    document.body[blockConfig.appendType](block);\n  }\n  // Configure Unav components and redirect uri\n  if (blockConfig.targetEl === 'header') {\n    setNavLayout();\n    const metaTags = [\n      { key: 'unavComponents', name: 'universal-nav' },\n      { key: 'redirect', name: 'adobe-home-redirect' },\n    ];\n    metaTags.forEach((tag) => {\n      const { key } = tag;\n      if (blockConfig[key]) {\n        const metaTag = createTag('meta', {\n          name: tag.name,\n          content: blockConfig[key],\n        });\n        document.head.append(metaTag);\n      }\n    });\n  }\n\n  await initBlock(document.querySelector(targetEl));\n  if (blockConfig.targetEl === 'footer') {\n    const { loadPrivacy } = await import('../scripts/delayed.js');\n    setTimeout(() => {\n      loadPrivacy(getConfig, loadScript);\n    }, blockConfig.delay);\n  }\n\n  /** Jarvis Chat */\n  if (jarvis?.id) {\n    const isChatInitialized = (client) => !!client?.isAdobeMessagingClientInitialized();\n\n    const isChatOpen = (client) => isChatInitialized(client) && client?.getMessagingExperienceState()?.windowState !== 'hidden';\n\n    const openChat = (event) => {\n      const client = window.AdobeMessagingExperienceClient;\n\n      /* c8 ignore next 4 */\n      if (!isChatInitialized(client)) {\n        window.location.assign('https://helpx.adobe.com');\n        return;\n      }\n\n      const open = client?.openMessagingWindow;\n      if (typeof open !== 'function' || isChatOpen(client)) {\n        return;\n      }\n\n      const sourceType = event?.target.tagName?.toLowerCase();\n      const sourceText = sourceType === 'img' ? event.target.alt?.trim() : event.target.innerText?.trim();\n\n      open(event ? { sourceType, sourceText } : {});\n    };\n\n    const addDomEvents = () => {\n      document.addEventListener('click', (event) => {\n        if (!event.target.closest('[href*=\"#open-jarvis-chat\"]')) return;\n        event.preventDefault();\n        openChat(event);\n      });\n    };\n\n    // Attach DOM events\n    addDomEvents();\n  }\n}\n"],"names":["bootstrapBlock","initBlock","blockConfig","name","targetEl","layout","noBorder","jarvis","getConfig","createTag","loadScript","document","querySelector","block","class","body","appendType","setNavLayout","element","classList","add","key","forEach","tag","metaTag","content","head","append","loadPrivacy","setTimeout","delay","id","isChatInitialized","client","isAdobeMessagingClientInitialized","isChatOpen","_client$getMessagingE","getMessagingExperienceState","windowState","openChat","event","_event$target$tagName","_event$target$alt","_event$target$innerTe","window","AdobeMessagingExperienceClient","location","assign","open","openMessagingWindow","sourceType","target","tagName","toLowerCase","sourceText","alt","trim","innerText","addDomEvents","addEventListener","closest","preventDefault"],"sourceRoot":""}