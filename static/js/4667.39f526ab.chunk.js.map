{"version":3,"file":"static/js/4667.39f526ab.chunk.js","mappings":"kJAgBe,SAARA,EAA2BC,EAAQC,GAExC,MAAmB,QADHD,EAAOE,GAAGC,MAAM,KACpB,GACH,IAAIC,SAASC,IAClBJ,EAAA,2BAAAK,OAAqCN,EAAOE,IAAMG,EAAQ,IAnBhE,SAAwBE,GAAqB,IAAdC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAIG,SACjC,MAAMC,EAAS,CAAEN,QAAOO,cAAe,IAAMC,OAAO,GAE9CC,EAAIR,EAAES,gBAAuBC,EAAIC,YAAW,KAAQH,EAAEI,UAAA,GAAAd,OAAeU,EAAEI,UAAUC,QAAQ,kBAAmB,IAAG,kBAAmBR,EAAOC,eAAsBZ,EAAKM,EAAEc,cAAc,UAAW,IAAIC,GAAI,EAAO,MAAMC,EAAIhB,EAAEiB,qBAAqB,UAAU,GAAI,IAAIC,EACvQ,OAD0QV,EAAEI,WAAa,cAAelB,EAAGyB,IAAA,2BAAArB,OAAiCO,EAAON,MAAK,OAAOL,EAAGa,OAAQ,EAAMb,EAAG0B,OAAS1B,EAAG2B,mBAAqB,WAAmC,GAArBH,EAAII,KAAKC,aAAgBR,GAAKG,GAAU,YAALA,GAAwB,UAALA,GAAjC,CAAwDH,GAAI,EAAMS,aAAad,GAAI,IAAMe,QAAQC,KAAKrB,EAAS,CAAE,MAAOsB,GAAI,CAAtE,CAAwE,EAAGX,EAAEY,WAAWC,aAAanC,EAAIsB,GAC/kBR,CACT,CAiBSsB,CAAetC,EAAOE,GAC/B,C","sources":["../node_modules/@adobecom/utils/fonts.js"],"sourcesContent":["// A gently modified version of the dynamic subsetting loader from Adobe Fonts\nfunction dynamicTypekit(kitId, d = document) {\n  const config = { kitId, scriptTimeout: 3000, async: true };\n  /* c8 ignore next 1 */\n  const h = d.documentElement; const t = setTimeout(() => { h.className = `${h.className.replace(/\\bwf-loading\\b/g, '')} wf-inactive`; }, config.scriptTimeout); const tk = d.createElement('script'); let f = false; const s = d.getElementsByTagName('script')[0]; let a; h.className += ' wf-loading'; tk.src = `https://use.typekit.net/${config.kitId}.js`; tk.async = true; tk.onload = tk.onreadystatechange = function () { a = this.readyState; if (f || a && a != 'complete' && a != 'loaded') return; f = true; clearTimeout(t); try { Typekit.load(config); } catch (e) {} }; s.parentNode.insertBefore(tk, s);\n  return h;\n}\n\n/**\n * Set the fonts of the page.\n *\n * Determines if the font should be a classic CSS integration\n * or if it should be a JS integration (dynamic subsetting) for CJK.\n *\n * @param {Object} locale the locale details\n */\nexport default function loadFonts(locale, loadStyle) {\n  const tkSplit = locale.tk.split('.');\n  if (tkSplit[1] === 'css') {\n    return new Promise((resolve) => {\n      loadStyle(`https://use.typekit.net/${locale.tk}`, resolve);\n    });\n  }\n  return dynamicTypekit(locale.tk);\n}\n"],"names":["loadFonts","locale","loadStyle","tk","split","Promise","resolve","concat","kitId","d","arguments","length","undefined","document","config","scriptTimeout","async","h","documentElement","t","setTimeout","className","replace","createElement","f","s","getElementsByTagName","a","src","onload","onreadystatechange","this","readyState","clearTimeout","Typekit","load","e","parentNode","insertBefore","dynamicTypekit"],"sourceRoot":""}