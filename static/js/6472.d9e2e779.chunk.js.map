{"version":3,"file":"static/js/6472.d9e2e779.chunk.js","mappings":"kJAgBe,SAARA,EAA2BC,EAAQC,GAExC,MAAmB,QADHD,EAAOE,GAAGC,MAAM,KACpB,GACH,IAAIC,SAASC,IAClBJ,EAAA,2BAAAK,OAAqCN,EAAOE,IAAMG,EACpD,IApBJ,SAAwBL,GAAqB,IAG4NO,EAH1ON,EAAAO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAIG,SAC3BC,EAAS,CAAEC,MAAAb,EAAOc,cAAe,IAAMC,OAAO,GAE9CV,EAAIJ,EAAEe,gBAAuBC,EAAIC,YAAW,KAAQb,EAAEc,UAAA,GAAAb,OAAeD,EAAEc,UAAUC,QAAQ,kBAAmB,IAAG,eAAgB,GAAGR,EAAOE,eAAsBO,EAAKpB,EAAEqB,cAAc,UAAeC,GAAI,EAAaC,EAAIvB,EAAEwB,qBAAqB,UAAU,GAAW,OAAApB,EAAEc,WAAa,cAAeE,EAAGK,IAAA,2BAAApB,OAAiCM,EAAOC,MAAK,OAAOQ,EAAGN,OAAQ,EAAMM,EAAGM,OAASN,EAAGO,mBAAqB,WAAmC,GAArBrB,EAAIsB,KAAKC,aAAgBP,GAAKhB,GAAU,YAALA,GAAwB,UAALA,GAAuB,CAAAgB,GAAI,EAAMQ,aAAad,GAAI,IAAMe,QAAQC,KAAKrB,EAAS,CAAE,MAAW,EAAE,EAAGY,EAAEU,WAAWC,aAAad,EAAIG,GAC/kBnB,CACT,CAiBS+B,CAAepC,EAAOE,GAC/B,C","sources":["../../milo/libs/utils/fonts.js"],"sourcesContent":["// A gently modified version of the dynamic subsetting loader from Adobe Fonts\nfunction dynamicTypekit(kitId, d = document) {\n  const config = { kitId, scriptTimeout: 3000, async: true };\n  /* c8 ignore next 1 */\n  const h = d.documentElement; const t = setTimeout(() => { h.className = `${h.className.replace(/\\bwf-loading\\b/g, '')} wf-inactive`; }, config.scriptTimeout); const tk = d.createElement('script'); let f = false; const s = d.getElementsByTagName('script')[0]; let a; h.className += ' wf-loading'; tk.src = `https://use.typekit.net/${config.kitId}.js`; tk.async = true; tk.onload = tk.onreadystatechange = function () { a = this.readyState; if (f || a && a != 'complete' && a != 'loaded') return; f = true; clearTimeout(t); try { Typekit.load(config); } catch (e) {} }; s.parentNode.insertBefore(tk, s);\n  return h;\n}\n\n/**\n * Set the fonts of the page.\n *\n * Determines if the font should be a classic CSS integration\n * or if it should be a JS integration (dynamic subsetting) for CJK.\n *\n * @param {Object} locale the locale details\n */\nexport default function loadFonts(locale, loadStyle) {\n  const tkSplit = locale.tk.split('.');\n  if (tkSplit[1] === 'css') {\n    return new Promise((resolve) => {\n      loadStyle(`https://use.typekit.net/${locale.tk}`, resolve);\n    });\n  }\n  return dynamicTypekit(locale.tk);\n}\n"],"names":["l","e","n","tk","split","Promise","t","concat","i","arguments","length","undefined","document","c","kitId","scriptTimeout","async","documentElement","r","setTimeout","className","replace","s","createElement","a","o","getElementsByTagName","src","onload","onreadystatechange","this","readyState","clearTimeout","Typekit","load","parentNode","insertBefore","u"],"sourceRoot":""}