{"version":3,"file":"static/js/168.feced69d.chunk.js","mappings":"0KA2COA,G,wCAxCP,MACEC,WAAAA,GAAc,IAAAC,EAAAC,GAAAC,EAAAA,EAAAA,GAAA,sBAOGC,IACf,MAAM,KAAEC,EAAA,OAAMC,GAAWF,EACnBG,EAAaD,EAAOE,UAAUC,SAASC,EAAAA,UAAUC,SAASC,MAAM,IACtE,OAAQP,GACN,IAAK,QACL,IAAK,QACCE,IACFH,EAAES,kBACFC,EAAAA,EAAAA,SAAQ,CAAEC,QAAST,EAAQU,MAAOZ,EAAGa,KAAM,cAE7C,MACF,IAAK,SAEsE,IAAAC,EAAAC,EAAzE,GADAf,EAAES,iBACEO,KAAKC,SAASb,UAAUC,SAASC,EAAAA,UAAUY,eAAeV,MAAM,IAC7D,QAALM,EAAAE,KAAKG,uBAAA,IAAAL,GAALA,EAAsBM,QACjB,QAALL,EAAAC,KAAKG,uBAAA,IAAAJ,GAALA,EAAsBM,QAK5B,KACFtB,EAAAA,EAAAA,GAAA,0BAEoB,KAAM,IAAAuB,EAAAC,EACnB,QAALD,EAAAN,KAAKC,gBAAA,IAAAK,GAALA,EAAeE,iBAAiB,UAAWR,KAAKS,eAC3C,QAALF,EAAAP,KAAKU,gBAAA,IAAAH,GAALA,EAAeC,iBAAiB,SAAUxB,IAAM,IAAA2B,EAC9C3B,EAAES,iBACG,QAALkB,EAAAX,KAAKG,uBAAA,IAAAQ,GAALA,EAAsBN,OAAO,GAC7B,IAlCFL,KAAKC,SAAWW,SAASC,cAAcvB,EAAAA,UAAUW,UACjDD,KAAKG,gBAAuB,QAAvBtB,EAAkBmB,KAAKC,gBAAA,IAAApB,OAAA,EAALA,EAAegC,cAAcvB,EAAAA,UAAUwB,eAC9Dd,KAAKU,SAAgB,QAAhB5B,EAAWkB,KAAKC,gBAAA,IAAAnB,OAAA,EAALA,EAAe+B,cAAcvB,EAAAA,UAAUyB,cACvDf,KAAKgB,mBACP,G","sources":["../node_modules/@adobecom/blocks/global-navigation/utilities/keyboard/localNav.js"],"sourcesContent":["import { selectors } from './utils.js';\nimport { trigger } from '../utilities.js';\n\nclass LocalNavItem {\n  constructor() {\n    this.localNav = document.querySelector(selectors.localNav);\n    this.localNavTrigger = this.localNav?.querySelector(selectors.localNavTitle);\n    this.exitLink = this.localNav?.querySelector(selectors.localNavExit);\n    this.addEventListeners();\n  }\n\n  handleKeyDown = (e) => {\n    const { code, target } = e;\n    const isHeadline = target.classList.contains(selectors.headline.slice(1));\n    switch (code) {\n      case 'Space':\n      case 'Enter':\n        if (isHeadline) {\n          e.preventDefault(); // Prevent default scrolling behavior for Space key\n          trigger({ element: target, event: e, type: 'headline' });\n        }\n        break;\n      case 'Escape': // close on escape\n        e.preventDefault();\n        if (this.localNav.classList.contains(selectors.localNavActive.slice(1))) {\n          this.localNavTrigger?.click();\n          this.localNavTrigger?.focus();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  addEventListeners = () => {\n    this.localNav?.addEventListener('keydown', this.handleKeyDown);\n    this.exitLink?.addEventListener('focus', (e) => {\n      e.preventDefault();\n      this.localNavTrigger?.focus();\n    });\n  };\n}\n\nexport default LocalNavItem;\n"],"names":["localNav_default","constructor","_this$localNav2","_this$localNav3","_defineProperty","e","code","target","isHeadline","classList","contains","selectors","headline","slice","preventDefault","trigger","element","event","type","_this$localNavTrigger","_this$localNavTrigger2","this","localNav","localNavActive","localNavTrigger","click","focus","_this$localNav","_this$exitLink","addEventListener","handleKeyDown","exitLink","_this$localNavTrigger3","document","querySelector","localNavTitle","localNavExit","addEventListeners"],"sourceRoot":""}